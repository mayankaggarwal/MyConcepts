<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Boilerplate.Web.Mvc5</name>
    </assembly>
    <members>
        <member name="T:Boilerplate.Web.Mvc.AtomActionResult">
            <summary>
            Represents a class that is used to render an Atom 1.0 feed by using an <see cref="T:System.ServiceModel.Syndication.SyndicationFeed"/> instance 
            representing the feed.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.AtomActionResult.#ctor(System.ServiceModel.Syndication.SyndicationFeed)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.AtomActionResult"/> class.
            </summary>
            <param name="syndicationFeed">The Atom 1.0 <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.AtomActionResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            Executes the call to the ActionResult method and returns the created feed to the output response.
            </summary>
            <param name="context">The context in which the result is executed. The context information includes the 
            controller, HTTP content, request context, and route data.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.ContentType">
            <summary>
            A list of internet media types, which are a standard identifier used on the Internet to indicate the type of 
            data that a file contains. Web browsers use them to determine how to display, output or handle files and search 
            engines use them to classify data files on the web.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.ContentType.Atom">
            <summary>Atom feeds.</summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.ContentType.Html">
            <summary>HTML; Defined in RFC 2854.</summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.ContentType.Gif">
            <summary>GIF image; Defined in RFC 2045 and RFC 2046.</summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.ContentType.Jpg">
            <summary>JPEG JFIF image; Defined in RFC 2045 and RFC 2046/</summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.ContentType.Json">
            <summary>JavaScript Object Notation JSON; Defined in RFC 4627.</summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.ContentType.Png">
            <summary>Portable Network Graphics; Registered,[8] Defined in RFC 2083.</summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.ContentType.Text">
            <summary>Textual data; Defined in RFC 2046 and RFC 3676.</summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.ContentType.Xml">
            <summary>Extensible Markup Language; Defined in RFC 3023</summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.CSharpRazorViewEngine">
            <summary>
            Represents a view engine that is used to render a Web page that uses the ASP.NET Razor syntax and C# .cshtml 
            files. The <see cref="T:System.Web.Mvc.RazorViewEngine"/> handles both C# and VB and looks for both .cshtml and .vbhtml files,
            whereas this version only looks for .cshtml files and so has a slight performance advantage.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.CSharpRazorViewEngine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.CSharpRazorViewEngine"/> class.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.CspViolationException">
            <summary>
            Represents a Content Security Policy (CSP) violation.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.CspViolationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.CspViolationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.CspViolationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.CspViolationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.CspViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.CspViolationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the 
            serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains 
            contextual information about the source or destination.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Experimental.ObjectPool.ArrayBuilder`1.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Boilerplate.Web.Mvc.Experimental.ObjectPool.ArrayBuilder`1"/> class from being created.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Experimental.ObjectPool.ListPool`1">
            <summary>
            Copied from Microsoft Roslyn code at http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis.Workspaces/Formatting/ListPool.cs,1086fa28bcfcb8ca
            A pool of <see cref="T:System.Collections.Generic.List`1"/> objects.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPool`1">
            <summary>
            Generic implementation of object pooling pattern with predefined pool size limit. The main purpose is that 
            limited number of frequently used objects can be kept in the pool for further recycling.
            
            Notes: 
            1) it is not the goal to keep all returned objects. Pool is not meant for storage. If there is no space in the 
            pool, extra returned objects will be dropped.
            
            2) it is implied that if object was obtained from a pool, the caller will return it back in a relatively short 
            time. Keeping checked out objects for long durations is ok, but reduces usefulness of pooling. Just new up your 
            own.
            
            Not returning objects to the pool in not detrimental to the pool's work, but is a bad practice. 
            Rationale: 
            If there is no intent for reusing the object, do not use pool - just use "new". 
            
            Copied from Microsoft Roslyn code at http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis/ObjectPool%25601.cs,20b9a041fb2d5b00
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPool`1.firstItem">
            <summary>
            The first item is stored in a dedicated field because we expect to be able to satisfy most requests from it.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPool`1.items">
            <summary>
            Storage for the pool objects.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPool`1.factory">
            <summary>
            Factory is stored for the lifetime of the pool. We will call this only when pool needs to
            expand. compared to "new T()", Func gives more flexibility to implementers and faster
            than "new T()".
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPool`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPool`1"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPool`1.#ctor(System.Func{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPool`1"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="size">The size of the pool.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPool`1.Allocate">
            <summary>
            Produces an instance.
            </summary>
            <remarks>
            Search strategy is a simple linear probing which is chosen for it cache-friendliness. Note that Free will 
            try to store recycled objects close to the start thus statistically reducing how far we will typically 
            search.
            </remarks>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPool`1.Free(`0)">
            <summary>
            Returns objects to the pool.
            </summary>
            <remarks>
            Search strategy is a simple linear probing which is chosen for it cache-friendliness.
            Note that Free will try to store recycled objects close to the start thus statistically 
            reducing how far we will typically search in Allocate.
            </remarks>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPool`1.ForgetTrackedObject(`0,`0)">
            <summary>
            Removes an object from leak tracking.  
            
            This is called when an object is returned to the pool.  It may also be explicitly 
            called if an object allocated from the pool is intentionally not being returned
            to the pool.  This can be of use with pooled arrays if the consumer wants to 
            return a larger array to the pool than was originally allocated.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPool`1.AllocateSlow">
            <summary>
            Allocates an instance if one already exists and is available, otherwise creates a new instance.
            </summary>
            <returns>An instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPool`1.CreateInstance">
            <summary>
            Creates a new instance of <typeparamref name="T"/> from the factory.
            </summary>
            <returns>A new instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPool`1.FreeSlow(`0)">
            <summary>
            Frees an instance of type <typeparamref name="T"/>.
            </summary>
            <param name="obj">The free instance of type <typeparamref name="T"/>.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Experimental.ObjectPool.PooledDictionary`2">
            <summary>
            Copied from Microsoft Roslyn code at http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis/PooledDictionary.cs,ebb1ac303c777646
            Dictionary that can be recycled via an object pool.
            NOTE: these dictionaries always have the default comparer.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Experimental.ObjectPool.PooledHashSet`1">
            <summary>
            Copied from Microsoft Roslyn code at http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis/PooledHashSet.cs,afe982be5207ab5e
            HashSet that can be recycled via an object pool.
            NOTE: these HashSets always have the default comparer.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Experimental.ObjectPool.PooledObject`1">
            <summary>
            Copied from Microsoft Roslyn code at http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis.Workspaces/Utilities/ObjectPools/PooledObject.cs,b2e28c15ee358f81
            This is resource acquisition is initialization (RAII) object to automatically release pooled object when its owning pool.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Experimental.ObjectPool.PooledObject`1.#ctor(Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPool{`0},System.Func{Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPool{`0},`0},System.Action{Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPool{`0},`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.Experimental.ObjectPool.PooledObject`1"/> struct.
            </summary>
            <param name="pool">The object pool.</param>
            <param name="allocator">The allocator function that allocates a new instance of <typeparamref name="T"/>.</param>
            <param name="releaser">The releaser function that de-allocates an instance of <typeparamref name="T"/>.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Experimental.ObjectPool.PooledObject`1.Object">
            <summary>
            Gets the pooled object.
            </summary>
            <value>
            The pooled object.
            </value>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Experimental.ObjectPool.PooledObject`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Experimental.ObjectPool.SerializableBytes">
            <summary>
            Copied from Microsoft Roslyn code at http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis.Workspaces/Utilities/SerializableBytes.cs,61c72a633a8d3192
            Helpers to create temporary streams backed by pooled memory.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPoolExtensions">
            <summary>
            <see cref="T:Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPool`1"/> extension methods.
            
            Copied from Microsoft Roslyn code at http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis.Workspaces/Utilities/ObjectPools/Extensions.cs,25c7c7b4d65ca62c
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPoolExtensions.AllocateAndClear(Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPool{System.Text.StringBuilder})">
            <summary>
            Allocates an empty <see cref="T:System.Text.StringBuilder"/> from the object pool.
            </summary>
            <param name="pool">The object pool.</param>
            <returns>The allocated and cleared <see cref="T:System.Text.StringBuilder"/>.</returns>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPoolExtensions.AllocateAndClear``1(Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPool{System.Collections.Generic.Stack{``0}})">
            <summary>
            Allocates an empty <see cref="T:System.Collections.Generic.Stack`1"/> from the object pool.
            </summary>
            <param name="pool">The object pool.</param>
            <returns>The allocated and cleared <see cref="T:System.Collections.Generic.Stack`1"/>.</returns>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPoolExtensions.AllocateAndClear``1(Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPool{System.Collections.Generic.Queue{``0}})">
            <summary>
            Allocates an empty <see cref="T:System.Collections.Generic.Queue`1"/> from the object pool.
            </summary>
            <param name="pool">The object pool.</param>
            <returns>The allocated and cleared <see cref="T:System.Collections.Generic.Queue`1"/>.</returns>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPoolExtensions.AllocateAndClear``1(Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPool{System.Collections.Generic.HashSet{``0}})">
            <summary>
            Allocates an empty <see cref="T:System.Collections.Generic.HashSet`1"/> from the object pool.
            </summary>
            <param name="pool">The object pool.</param>
            <returns>The allocated and cleared <see cref="T:System.Collections.Generic.HashSet`1"/>.</returns>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPoolExtensions.AllocateAndClear``2(Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPool{System.Collections.Generic.Dictionary{``0,``1}})">
            <summary>
            Allocates an empty <see cref="T:System.Collections.Generic.Dictionary`2"/> from the object pool.
            </summary>
            <param name="pool">The object pool.</param>
            <returns>The allocated and cleared <see cref="T:System.Collections.Generic.Dictionary`2"/>.</returns>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPoolExtensions.AllocateAndClear``1(Boilerplate.Web.Mvc.Experimental.ObjectPool.ObjectPool{System.Collections.Generic.List{``0}})">
            <summary>
            Allocates an empty <see cref="T:System.Collections.Generic.List`1"/> from the object pool.
            </summary>
            <param name="pool">The object pool.</param>
            <returns>The allocated and cleared <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Experimental.ObjectPool.SharedPools">
            <summary>
            Copied from Microsoft Roslyn code at http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis.Workspaces/Utilities/ObjectPools/SharedPools.cs,b2114905209e7df3
            
            Use this shared pool if only concern is reducing object allocations.
            if perf of an object pool itself is also a concern, use ObjectPool directly.
            
            For example, if you want to create a million of small objects within a second, 
            use the ObjectPool directly. it should have much less overhead than using this.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Experimental.ObjectPool.SharedPools.ByteBufferSize">
            pooled memory : 4K * 512 = 4MB
        </member>
        <member name="M:Boilerplate.Web.Mvc.Experimental.ObjectPool.SharedPools.BigDefault``1">
            <summary>
            Pool that uses default constructor with 100 elements pooled.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Experimental.ObjectPool.SharedPools.Default``1">
            <summary>
            Pool that uses default constructor with 20 elements pooled.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Experimental.ObjectPool.SharedPools.StringIgnoreCaseDictionary``1">
            <summary>
            Pool that uses string as key with StringComparer.OrdinalIgnoreCase as key comparer with 20 elements pooled.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Experimental.ObjectPool.SharedPools.StringIgnoreCaseHashSet">
            <summary>
            Pool that uses string as element with StringComparer.OrdinalIgnoreCase as element comparer.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Experimental.ObjectPool.SharedPools.StringHashSet">
            <summary>
            Pool that uses string as element with StringComparer.Ordinal as element comparer.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Experimental.ObjectPool.SharedPools.ByteArray">
            <summary>
            Used to reduce the # of temporary byte[]s created to satisfy serialization and other I/O requests.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Experimental.ObjectPool.SharedPools.DefaultBigPool`1">
            <summary>
            A pool of objects of type <typeparamref name="T"/>, up to a maximum of 100 instances.
            </summary>
            <typeparam name="T">The type of the object to pool.</typeparam>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Experimental.ObjectPool.SharedPools.DefaultBigPool`1.Instance">
            <summary>
            The pool of objects of type <typeparamref name="T"/>, up to a maximum of 100 instances.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Experimental.ObjectPool.SharedPools.DefaultNormalPool`1">
            <summary>
            A pool of objects of type <typeparamref name="T"/>, up to a maximum of 20 instances.
            </summary>
            <typeparam name="T">The type of the object to pool.</typeparam>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Experimental.ObjectPool.SharedPools.DefaultNormalPool`1.Instance">
            <summary>
            The pool of objects of type <typeparamref name="T"/>, up to a maximum of 20 instances.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Experimental.ObjectPool.SharedPools.StringIgnoreCaseDictionaryNormalPool`1">
            <summary>
            A pool of dictionaries of type <see cref="T:System.Collections.Generic.Dictionary`2"/> with StringComparer.OrdinalIgnoreCase as key comparer, up to a maximum of 20 instances.
            </summary>
            <typeparam name="T">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Experimental.ObjectPool.SharedPools.StringIgnoreCaseDictionaryNormalPool`1.Instance">
            <summary>
            The pool of dictionaries of type <see cref="T:System.Collections.Generic.Dictionary`2"/> with StringComparer.OrdinalIgnoreCase as key comparer, up to a maximum of 20 instances.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Experimental.ObjectPool.StringBuilderPool">
            <summary>
            Copied from Microsoft Roslyn code at http://source.roslyn.codeplex.com/#Microsoft.CodeAnalysis.Workspaces/Formatting/StringBuilderPool.cs,039ef0c630df07c3
            A pool of <see cref="T:System.Text.StringBuilder"/> objects.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Experimental.ObjectPool.StringBuilderPool.Allocate">
            <summary>
            Allocates an instance of <see cref="T:System.Text.StringBuilder"/> from the object pool.
            </summary>
            <returns>An instance of <see cref="T:System.Text.StringBuilder"/>.</returns>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Experimental.ObjectPool.StringBuilderPool.Free(System.Text.StringBuilder)">
            <summary>
            Frees the specified string builder back to the object pool.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Experimental.ObjectPool.StringBuilderPool.ReturnAndFree(System.Text.StringBuilder)">
            <summary>
            Returns the <see cref="T:System.String"/> representation of the <paramref name="stringBuilder"/> and frees it back 
            to the object pool.
            </summary>
            <param name="stringBuilder">The string builder.</param>
            <returns>The <see cref="T:System.String"/> representation of the <paramref name="stringBuilder"/>.</returns>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Experimental.ViewModel">
            <summary>
            A base class for a view's model.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Experimental.ViewModel.Author">
            <summary>
            Gets or sets the author of the view. This is an optional property.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Experimental.ViewModel.Description">
            <summary>
            Gets or sets the description of the view. This is used by search engines and you should aim for your description to be more than 160 characters.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Experimental.ViewModel.Title">
            <summary>
            Gets or sets the title of the view. The title of the page. Appears in the browser window title.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Experimental.ViewModel.OpenGraph">
            <summary>
            Gets or sets the Open Graph metadata. See <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata"/> for more information.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Experimental.ViewModel.TwitterCard">
            <summary>
            Gets or sets the twitter card. See <see cref="P:Boilerplate.Web.Mvc.Experimental.ViewModel.TwitterCard"/> for more information.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Experimental.ViewModel`1">
            <summary>
            A base class for a view's model.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Experimental.ViewModel`1.Value">
            <summary>
            Gets or sets the model value.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Filters.NoCacheAttribute">
            <summary>
            Represents an attribute that is used to mark an action method whose output will not be cached.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Filters.NoCacheAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.Filters.NoCacheAttribute"/> class.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Filters.NoLowercaseQueryStringAttribute">
            <summary>
            Ensures that a HTTP request URL can contain query string parameters with both upper-case and lower-case 
            characters.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Filters.ValidateHeaderAntiForgeryTokenAttribute">
            <summary>
            Represents an attribute that is used to prevent forgery of a request. Same as 
            <see cref="T:System.Web.Mvc.ValidateAntiForgeryTokenAttribute"/>, except this instance checks the HTTP Headers instead of the 
            form inputs for one of the tokens. The other token is expected to be in the cookie as normal. This is useful 
            for performing Ajax requests. See 
            http://stackoverflow.com/questions/4074199/jquery-ajax-calls-and-the-html-antiforgerytoken.
            </summary>
            <example>
            On the client side, when doing an Ajax request from jQuery, the anti-forgery token HTTP header can be added like so:
            <code>
            $.ajax(
                "postlocation", 
                {
                    type: "post",
                    contentType: "application/json",
                    data: {  }, // JSON data goes here
                    dataType: "json",
                    headers: {
                        'X-RequestVerificationToken': '@TokenHeaderValue()'
                    }
                });
            </code>
            On the server side, you simply need to add the <see cref="T:Boilerplate.Web.Mvc.Filters.ValidateHeaderAntiForgeryTokenAttribute"/> attribute 
            to the controller or action the same way you would use <see cref="T:System.Web.Mvc.ValidateAntiForgeryTokenAttribute"/>.
            </example>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Filters.ValidateHeaderAntiForgeryTokenAttribute.RequestVerificationTokenHttpHeaderName">
            <summary>
            The name of the request verification token HTTP header i.e. X-RequestVerificationToken.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Filters.ValidateHeaderAntiForgeryTokenAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
            <summary>
            Called when authorization is required.
            </summary>
            <param name="filterContext">The filter context.</param>
            <exception cref="T:System.ArgumentNullException">The filterContext parameter is null.</exception>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Filters.NoTrailingSlashAttribute">
            <summary>
            Requires that a HTTP request does not contain a trailing slash. If it does, return a 404 Not Found. This is 
            useful if you are dynamically generating something which acts like it's a file on the web server. 
            E.g. /Robots.txt/ should not have a trailing slash and should be /Robots.txt. Note, that we also don't care if 
            it is upper-case or lower-case in this instance.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Filters.NoTrailingSlashAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
            <summary>
            Determines whether a request contains a trailing slash and if it does, calls the 
            <see cref="M:Boilerplate.Web.Mvc.Filters.NoTrailingSlashAttribute.HandleTrailingSlashRequest(System.Web.Mvc.AuthorizationContext)"/> method.
            </summary>
            <param name="filterContext">An object that encapsulates information that is required in order to use the 
            <see cref="T:System.Web.Mvc.RequireHttpsAttribute"/> attribute.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="filterContext"/> parameter is null.</exception>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Filters.NoTrailingSlashAttribute.HandleTrailingSlashRequest(System.Web.Mvc.AuthorizationContext)">
            <summary>
            Handles HTTP requests that have a trailing slash but are not meant to.
            </summary>
            <param name="filterContext">An object that encapsulates information that is required in order to use the 
            <see cref="T:System.Web.Mvc.RequireHttpsAttribute"/> attribute.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Filters.RedirectToCanonicalUrlAttribute">
            <summary>
            To improve Search Engine Optimization SEO, there should only be a single URL for each resource. Case 
            differences and/or URL's with/without trailing slashes are treated as different URL's by search engines. This 
            filter redirects all non-canonical URL's based on the settings specified to their canonical equivalent. 
            Note: Non-canonical URL's are not generated by this site template, it is usually external sites which are 
            linking to your site but have changed the URL case or added/removed trailing slashes.
            (See Google's comments at http://googlewebmastercentral.blogspot.co.uk/2010/04/to-slash-or-not-to-slash.html
            and Bing's at http://blogs.bing.com/webmaster/2012/01/26/moving-content-think-301-not-relcanonical).
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Filters.RedirectToCanonicalUrlAttribute.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.Filters.RedirectToCanonicalUrlAttribute" /> class.
            </summary>
            <param name="appendTrailingSlash">If set to <c>true</c> append trailing slashes, otherwise strip trailing 
            slashes.</param>
            <param name="lowercaseUrls">If set to <c>true</c> lower-case all URL's.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Filters.RedirectToCanonicalUrlAttribute.AppendTrailingSlash">
            <summary>
            Gets a value indicating whether to append trailing slashes.
            </summary>
            <value>
            <c>true</c> if appending trailing slashes; otherwise, strip trailing slashes.
            </value>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Filters.RedirectToCanonicalUrlAttribute.LowercaseUrls">
            <summary>
            Gets a value indicating whether to lower-case all URL's.
            </summary>
            <value>
            <c>true</c> if lower-casing URL's; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Filters.RedirectToCanonicalUrlAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
            <summary>
            Determines whether the HTTP request contains a non-canonical URL using <see cref="M:Boilerplate.Web.Mvc.Filters.RedirectToCanonicalUrlAttribute.TryGetCanonicalUrl(System.Web.Mvc.AuthorizationContext,System.String@)"/>, 
            if it doesn't calls the <see cref="M:Boilerplate.Web.Mvc.Filters.RedirectToCanonicalUrlAttribute.HandleNonCanonicalRequest(System.Web.Mvc.AuthorizationContext,System.String)"/> method.
            </summary>
            <param name="filterContext">An object that encapsulates information that is required in order to use the 
            <see cref="T:Boilerplate.Web.Mvc.Filters.RedirectToCanonicalUrlAttribute"/> attribute.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="filterContext"/> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Filters.RedirectToCanonicalUrlAttribute.TryGetCanonicalUrl(System.Web.Mvc.AuthorizationContext,System.String@)">
            <summary>
            Determines whether the specified URl is canonical and if it is not, outputs the canonical URL.
            </summary>
            <param name="filterContext">An object that encapsulates information that is required in order to use the 
            <see cref="T:Boilerplate.Web.Mvc.Filters.RedirectToCanonicalUrlAttribute" /> attribute.</param>
            <param name="canonicalUrl">The canonical URL.</param>
            <returns><c>true</c> if the URL is canonical, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Filters.RedirectToCanonicalUrlAttribute.HandleNonCanonicalRequest(System.Web.Mvc.AuthorizationContext,System.String)">
            <summary>
            Handles HTTP requests for URL's that are not canonical. Performs a 301 Permanent Redirect to the canonical URL.
            </summary>
            <param name="filterContext">An object that encapsulates information that is required in order to use the 
            <see cref="T:Boilerplate.Web.Mvc.Filters.RedirectToCanonicalUrlAttribute" /> attribute.</param>
            <param name="canonicalUrl">The canonical URL.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Filters.RedirectToCanonicalUrlAttribute.HasNoTrailingSlashAttribute(System.Web.Mvc.AuthorizationContext)">
            <summary>
            Determines whether the specified action or its controller has the <see cref="T:Boilerplate.Web.Mvc.Filters.NoTrailingSlashAttribute"/> 
            attribute specified.
            </summary>
            <param name="filterContext">The filter context.</param>
            <returns><c>true</c> if a <see cref="T:Boilerplate.Web.Mvc.Filters.NoTrailingSlashAttribute"/> attribute is specified, otherwise 
            <c>false</c>.</returns>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Filters.RedirectToCanonicalUrlAttribute.HasNoLowercaseQueryStringAttribute(System.Web.Mvc.AuthorizationContext)">
            <summary>
            Determines whether the specified action or its controller has the <see cref="T:Boilerplate.Web.Mvc.Filters.NoLowercaseQueryStringAttribute"/> 
            attribute specified.
            </summary>
            <param name="filterContext">The filter context.</param>
            <returns><c>true</c> if a <see cref="T:Boilerplate.Web.Mvc.Filters.NoLowercaseQueryStringAttribute"/> attribute is specified, otherwise 
            <c>false</c>.</returns>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Filters.RedirectToHttpsAttribute">
            <summary>
            Represents an attribute that forces an unsecured HTTP request to be re-sent over HTTPS. 
            <see cref="T:System.Web.Mvc.RequireHttpsAttribute"/> performs a 302 Temporary redirect from a HTTP URL to a HTTPS URL. This 
            filter gives you the option to perform a 301 Permanent redirect or a 302 temporary redirect. You should 
            perform a 301 permanent redirect if the page can only ever be accessed by HTTPS and a 302 temporary redirect if
            the page can be accessed over HTTP or HTTPS. <see cref="T:System.Web.Mvc.RequireHttpsAttribute"/> also throws an 
            <see cref="T:System.InvalidOperationException"/> if request is made except GET, which returns a 500 Internal Server 
            Error to the client. This filter, returns a 405 Method Not Allowed instead, which is much more suitable.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Filters.RedirectToHttpsAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.Filters.RedirectToHttpsAttribute"/> class.
            </summary>
            <param name="permanent">if set to <c>true</c> the redirection should be permanent; otherwise, 
            <c>false</c>.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Filters.RedirectToHttpsAttribute.Permanent">
            <summary>
            Gets a value indicating whether the redirection should be permanent.
            </summary>
            <value>
            <c>true</c> if the redirection should be permanent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Filters.RedirectToHttpsAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
            <summary>
            Determines whether a request is secured (HTTPS) and, if it is not, calls the 
            <see cref="M:Boilerplate.Web.Mvc.Filters.RedirectToHttpsAttribute.HandleNonHttpsRequest(System.Web.Mvc.AuthorizationContext)"/> method.
            </summary>
            <param name="filterContext">An object that encapsulates information that is required in order to use the 
            <see cref="T:System.Web.Mvc.RequireHttpsAttribute"/> attribute.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="filterContext"/> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Filters.RedirectToHttpsAttribute.HandleNonHttpsRequest(System.Web.Mvc.AuthorizationContext)">
            <summary>
            Handles unsecured HTTP requests that are sent to the action method.
            </summary>
            <param name="filterContext">An object that encapsulates information that is required in order to use the 
            <see cref="T:System.Web.Mvc.RequireHttpsAttribute"/> attribute.</param>
            <exception cref="T:System.Web.HttpException">The HTTP request contains an invalid transfer method override. 
            All GET requests are considered invalid. A HTTP 405 Method Not Allowed is thrown.</exception>
        </member>
        <member name="T:Boilerplate.Web.Mvc.HtmlHelperExtensions">
            <summary>
            <see cref="T:System.Web.Mvc.HtmlHelper"/> extension methods.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.HtmlHelperExtensions.ReferrerMeta(System.Web.Mvc.HtmlHelper,Boilerplate.Web.Mvc.ReferrerMode)">
            <summary>
            Creates a string containing the referrer meta tags. <see cref="T:Boilerplate.Web.Mvc.ReferrerMode"/> for more information.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="referrerMode">The type of referrer allowed to be sent.</param>
            <returns>The referrer meta tag.</returns>
        </member>
        <member name="T:Boilerplate.Web.Mvc.ReferrerMode">
            <summary>
            Controls what is sent in the HTTP referrer header when a client navigates from your page to an external site.
            
            Privacy
            A social networking site has a profile page for each of its users, and users add hyperlinks from their profile 
            page to their favourite bands. The social networking site might not wish to leak the user's profile URL to the 
            band web sites when other users follow those hyperlinks (because the profile URLs might reveal the identity of 
            the owner of the profile). Some social networking sites, however, might wish to inform the band web sites that 
            the links originated from the social networking site but not reveal which specific user's profile contained the 
            links.
            
            Security
            A web application uses HTTPS and a URL-based session identifier. The web application might wish to link to 
            HTTPS resources on other web sites without leaking the user's session identifier in the URL. Alternatively, a 
            web application may use URLs which themselves grant some capability. Controlling the referrer can help prevent 
            these capability URLs from leaking via referrer headers.
            
            See http://www.w3.org/TR/referrer-policy/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.ReferrerMode.None">
            <summary>
            No referrer information is to be sent along with requests made from a particular global environment to any 
            origin. The header will be omitted entirely.
            </summary>
            <example>
            If a document at https://example.com/page.html sets a policy of None, then navigations to 
            https://example.com/ (or any other URL) would send no referrer header.
            </example>
        </member>
        <member name="F:Boilerplate.Web.Mvc.ReferrerMode.NoneWhenDowngrade">
            <summary>
            Sends a full URL along with requests from TLS-protected global environments to a non-a priori insecure 
            origin, and requests from global environments which are not TLS-protected to any origin.
            Requests from TLS-protected global environments to a priori insecure origins, on the other hand, will 
            contain no referrer information. A referrer will not be sent. This is a user agent's default behaviour, if 
            no policy is otherwise specified.
            </summary>
            <example>
            If a document at https://example.com/page.html sets a policy of None When Downgrade, then navigations to 
            https://not.example.com/ would send a referrer HTTP header with a value of https://example.com/page.html, 
            as neither resource's origin is an a priori insecure origin.
            Navigations from that same page to http://not.example.com/ would send no referrer header.
            </example>
        </member>
        <member name="F:Boilerplate.Web.Mvc.ReferrerMode.Origin">
            <summary>
            Specifies that only the ASCII serialization of the origin of the global environment from which a request is 
            made is sent as referrer information when making both same-origin requests and cross-origin requests from a 
            particular global environment.
            </summary>
            <example>
            If a document at https://example.com/page.html sets a policy of Origin Only, then navigations to any origin 
            would send a referrer header with a value of https://example.com/, even to a priori insecure origins. 
            </example>
        </member>
        <member name="F:Boilerplate.Web.Mvc.ReferrerMode.OriginWhenCrossOrigin">
            <summary>
            Specifies that a full URL, stripped for use as a referrer, is sent as referrer information when making 
            same-origin requests from a particular global environment, and only the ASCII serialization of the origin 
            of the global environment from which a request is made is sent at referrer information when making 
            cross-origin requests from a particular global environment.
            </summary>
            <remarks>
            For the Origin When Cross-Origin policy, we also consider protocol upgrades, e.g. requests from 
            http://exmaple.com/ to https://example.com/ to be cross-origin requests.
            </remarks>
            <example>
            If a document at https://example.com/page.html sets a policy of Origin When Cross-Origin, then navigations 
            to any https://example.com/not-page.html would send a referrer header with a value of 
            https://example.com/page.html.
            Navigations from that same page to https://not.example.com/ would send a referrer header with a value of 
            https://example.com/, even to a priori insecure origins.
            </example>
        </member>
        <member name="F:Boilerplate.Web.Mvc.ReferrerMode.UnsafeUrl">
            <summary>
            Specifies that a full URL, stripped for use as a referrer, is sent along with both cross-origin requests 
            and same-origin requests made from a particular global environment.
            </summary>
            <remarks>
            The policy's name doesn't lie; it is unsafe. This policy will leak origins and paths from TLS-protected 
            resources to insecure origins. Carefully consider the impact of setting such a policy for potentially 
            sensitive documents.
            </remarks>
            <example>
            If a document at https://example.com/sekrit.html sets a policy of Unsafe URL, then navigations to 
            http://not.example.com/ (and every other origin) would send a referrer HTTP header with a value of 
            https://example.com/sekrit.html. 
            </example>
        </member>
        <member name="T:Boilerplate.Web.Mvc.ReferrerModeExtensions">
            <summary>
            <see cref="T:Boilerplate.Web.Mvc.ReferrerMode"/> extension methods.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.ReferrerModeExtensions.ToLowercaseString(Boilerplate.Web.Mvc.ReferrerMode)">
            <summary>
            Returns the lower-case <see cref="T:System.String" /> representation of the <see cref="T:Boilerplate.Web.Mvc.ReferrerMode" />.
            </summary>
            <param name="referrerMode">The referrer mode.</param>
            <returns>
            The lower-case <see cref="T:System.String" /> representation of the <see cref="T:Boilerplate.Web.Mvc.ReferrerMode" />.
            </returns>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Twitter.AppTwitterCard">
            <summary>
            The App Card is a great way to represent mobile applications on Twitter and to drive installs. The app card 
            is designed to allow for a name, description and icon, and also to highlight attributes such as the rating 
            and the price. This Card type is currently available on the twitter.com website, as well as iOS and Android 
            mobile clients. It is not yet available on mobile web. See https://dev.twitter.com/cards/types/app.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Twitter.AppTwitterCard.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.Twitter.AppTwitterCard"/> class.
            </summary>
            <param name="username">The Twitter username associated with the page e.g. @RehanSaeedUK. This is a required property.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.AppTwitterCard.Description">
            <summary>
            Gets or sets the description that concisely summarizes the content of the page, as appropriate for 
            presentation within a Tweet. Do not re-use the title text as the description, or use this field 
            to describe the general services provided by the website. Description text will be truncated at 
            the word to 200 characters. If you are using Facebook's Open Graph og:description, do not use this
            unless you want a different description.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.AppTwitterCard.Country">
            <summary>
            Gets or sets the country. If your application is not available in the US App Store, you must set this 
            value to the two-letter country code for the App Store that contains your application.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.AppTwitterCard.GooglePlay">
            <summary>
            Gets or sets the numeric representation of your app ID in Google Play (.i.e. “com.android.app”).
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.AppTwitterCard.GooglePlayCustomUrlScheme">
            <summary>
            Gets or sets your google play app’s custom URL scheme (you must include “://” after your scheme name).
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.AppTwitterCard.IPad">
            <summary>
            Gets or sets numeric representation of your iPad app ID in the App Store (.i.e. “307234931”).
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.AppTwitterCard.IPadCustomUrlScheme">
            <summary>
            Gets or sets your iPad app’s custom URL scheme (you must include “://” after your scheme name).
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.AppTwitterCard.IPhone">
            <summary>
            Gets or sets numeric representation of your iPhone app ID in the App Store (.i.e. “307234931”).
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.AppTwitterCard.IPhoneCustomUrlScheme">
            <summary>
            Gets or sets your iPhone app’s custom URL scheme (you must include “://” after your scheme name).
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.AppTwitterCard.Type">
            <summary>
            Gets the type of the Twitter card.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Twitter.AppTwitterCard.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Twitter card meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Twitter.GalleryTwitterCard">
            <summary>
            The Gallery Card allows you to represent collections of photos within a Tweet. This Card type is 
            designed to let the user know that there’s more than just a single image at the URL shared, but 
            rather a gallery of related images. You can specify up to 4 different images to show in the gallery 
            card. You can also provide attribution to the photographer of the  gallery by specifying the value of the creator tag. 
            See https://dev.twitter.com/cards/types/gallery.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Twitter.GalleryTwitterCard.#ctor(System.String,Boilerplate.Web.Mvc.Twitter.TwitterImage,Boilerplate.Web.Mvc.Twitter.TwitterImage,Boilerplate.Web.Mvc.Twitter.TwitterImage,Boilerplate.Web.Mvc.Twitter.TwitterImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.Twitter.GalleryTwitterCard" /> class.
            </summary>
            <param name="username">The Twitter username of the creator of the content on the page e.g. @RehanSaeedUK. This is an optional property.</param>
            <param name="image0">The image0.</param>
            <param name="image1">The image1.</param>
            <param name="image2">The image2.</param>
            <param name="image3">The image3.</param>
            <exception cref="T:System.ArgumentNullException">username or image0 or image1 or image2 or image3 is <c>null</c>.</exception>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.GalleryTwitterCard.CreatorUsername">
            <summary>
            Gets or sets the Twitter username of the creator of the content on the page e.g. @RehanSaeedUK. This is an optional property.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.GalleryTwitterCard.Description">
            <summary>
            Gets or sets the description that concisely summarizes the content of the page, as appropriate for 
            presentation within a Tweet. Do not re-use the title text as the description, or use this field 
            to describe the general services provided by the website. Description text will be truncated at 
            the word to 200 characters. This is an optional property. If you are using Facebook's Open Graph og:description, 
            do not use this unless you want a different description.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.GalleryTwitterCard.Image0">
            <summary>
            Gets the URL to the first image representing the content of the page.  Images must be less than 1MB in size.
            If you are using Facebook's Open Graph og:image, you do not have to use this unless you want a different image but 
            it is recommended to supply a smaller image that fits Twitters needs.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.GalleryTwitterCard.Image1">
            <summary>
            Gets the URL to the second image representing the content of the page.  Images must be less than 1MB in size.
            If you are using Facebook's Open Graph og:image, you do not have to use this unless you want a different image but 
            it is recommended to supply a smaller image that fits Twitters needs.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.GalleryTwitterCard.Image2">
            <summary>
            Gets the URL to the third image representing the content of the page.  Images must be less than 1MB in size.
            If you are using Facebook's Open Graph og:image, you do not have to use this unless you want a different image but 
            it is recommended to supply a smaller image that fits Twitters needs.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.GalleryTwitterCard.Image3">
            <summary>
            Gets the URL to the fourth image representing the content of the page.  Images must be less than 1MB in size.
            If you are using Facebook's Open Graph og:image, you do not have to use this unless you want a different image but 
            it is recommended to supply a smaller image that fits Twitters needs.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.GalleryTwitterCard.Title">
            <summary>
            Gets or sets the title of your content as it should appear in the card. You may specify an empty 
            string if you wish no title to render.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.GalleryTwitterCard.Type">
            <summary>
            Gets the type of the Twitter card.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Twitter.GalleryTwitterCard.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Twitter card meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Twitter.PhotoTwitterCard">
            <summary>
            The Photo Card puts the image front and center in the Tweet. Clicking on the photo expands it to a 
            richer, detailed view. On twitter.com and mobile clients, the image appears below the tweet text.
            See https://dev.twitter.com/cards/types/photo
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Twitter.PhotoTwitterCard.#ctor(System.String,Boilerplate.Web.Mvc.Twitter.TwitterImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.Twitter.PhotoTwitterCard"/> class.
            </summary>
            <param name="username">The username.</param>
            <param name="image">The image to use.</param>
            <exception cref="T:System.ArgumentNullException">username or image is <c>null</c>.</exception>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.PhotoTwitterCard.CreatorUsername">
            <summary>
            Gets or sets the Twitter username of the creator of the content on the page e.g. @RehanSaeedUK. This is an optional property.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.PhotoTwitterCard.Image">
            <summary>
            Gets or sets the image. A URL to the image representing the content. Image must be less than 1MB in size.
            Twitter will resize images, maintaining original aspect ratio to fit the following sizes:
            - Web: maximum height of 375px, maximum width of 435px
            - Mobile (non-retina displays): maximum height of 375px, maximum width of 280px
            - Mobile (retina displays): maximum height of 750px, maximum width of 560px
            Twitter will not create a photo card unless the twitter:image is of a minimum size of 280px wide by 150px tall. 
            Images will not be cropped unless they have an exceptional aspect ratio. 
            Images will be fetched and proxied by Twitter to ensure a high quality of service and SSL security for users.
            Specifying the width and height using twitter:image:width and twitter:image:height helps Twitter more accurately 
            preserve the aspect ratio of the image when resizing.
            Photo Cards are the only type of card which support a blank title, even if you are not using Open Graph.
            Animated gifs are currently supported in Twitter Cards via the Player Card.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.PhotoTwitterCard.Title">
            <summary>
            Gets or sets the title of your content as it should appear in the card. You may specify an empty 
            string if you wish no title to render.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.PhotoTwitterCard.Type">
            <summary>
            Gets the type of the Twitter card.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Twitter.PhotoTwitterCard.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Twitter card meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Twitter.PlayerTwitterCard">
            <summary>
            Video clips and audio streams have a special place on the Twitter platform thanks to the Player Card. By implementing a few HTML meta tags to 
            your website and following the Twitter Rules of the Road, you can deliver your rich media to users across the globe.
            Twitter must approve the use of the player card, find out more below.
            See https://dev.twitter.com/cards/types/player
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Twitter.PlayerTwitterCard.#ctor(System.String,Boilerplate.Web.Mvc.Twitter.TwitterImage,Boilerplate.Web.Mvc.Twitter.TwitterPlayer)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.Twitter.PlayerTwitterCard" /> class.
            </summary>
            <param name="username">The Twitter username associated with the page e.g. @RehanSaeedUK. This is a required property.</param>
            <param name="image">The image to be displayed in place of the player on platforms that don’t support iframes or inline players. 
            You should make this image the same dimensions as your player. Images with fewer than 68,600 pixels 
            (a 262x262 square image, or a 350x196 16:9 image) will cause the player card not to render. 
            Image must be less than 1MB in size.</param>
            <param name="player">The video player.</param>
            <exception cref="T:System.ArgumentNullException">username is <c>null</c>.</exception>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.PlayerTwitterCard.Description">
            <summary>
            Gets or sets the description that concisely summarizes the content of the page, as appropriate for 
            presentation within a Tweet. Do not re-use the title text as the description, or use this field 
            to describe the general services provided by the website. Description text will be truncated at 
            the word to 200 characters. If you are using Facebook's Open Graph og:description, do not use this
            unless you want a different description.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.PlayerTwitterCard.Image">
            <summary>
            Gets the image to be displayed in place of the player on platforms that don’t support iframes or inline players. 
            You should make this image the same dimensions as your player. Images with fewer than 68,600 pixels 
            (a 262x262 square image, or a 350x196 16:9 image) will cause the player card not to render. 
            Image must be less than 1MB in size.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.PlayerTwitterCard.Player">
            <summary>
            Gets the video player. If the iframe is wider than 435px, the iframe player will be resized to fit a max width of 435px, maintaining the original aspect ratio.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.PlayerTwitterCard.Title">
            <summary>
            Gets or sets the title of the summary. Title should be concise and will be truncated at 70 characters.
            If you are using Facebook's Open Graph og:title, do not use this unless you want a different title.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.PlayerTwitterCard.Type">
            <summary>
            Gets the type of the Twitter card.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Twitter.PlayerTwitterCard.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Twitter card meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Twitter.ProductTwitterCard">
            <summary>
            The Product Card is a great way to represent product and retail items on Twitter. This Card type is designed to showcase your products via an 
            image, a description, and allow you to highlight two other key details about your product.
            See https://dev.twitter.com/cards/types/product
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Twitter.ProductTwitterCard.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.Twitter.ProductTwitterCard"/> class.
            </summary>
            <param name="username">The Twitter username of the creator of the content on the page e.g. @RehanSaeedUK. This is an optional property.</param>
            <exception cref="T:System.ArgumentNullException">username is <c>null</c>.</exception>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.ProductTwitterCard.CreatorUsername">
            <summary>
            Gets or sets the Twitter username of the creator of the content on the page e.g. @RehanSaeedUK. This is an optional property.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.ProductTwitterCard.Data1">
            <summary>
            Gets or sets the first data value for label one.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.ProductTwitterCard.Data2">
            <summary>
            Gets or sets the second data value for label two.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.ProductTwitterCard.Description">
            <summary>
            Gets or sets the description that concisely summarizes the content of the page, as appropriate for 
            presentation within a Tweet. Do not re-use the title text as the description, or use this field 
            to describe the general services provided by the website. Description text will be truncated at 
            the word to 200 characters. If you are using Facebook's Open Graph og:description, do not use this
            unless you want a different description.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.ProductTwitterCard.Image">
            <summary>
            Gets or sets the URL to a unique image representing the content of the page. Do not use a generic 
            image such as your website logo, author photo, or other image that spans multiple pages. The 
            image must be a minimum size of 160px by 160px and must be less than 1MB in file size. It prefers a 
            square image but we crop/resize oddly shaped images to fit as long as both dimensions are greater than 
            or equal to 160 pixels. If you are using Facebook's Open Graph og:image, you do not have to use
            this unless you want a different image but it is recommended to get supply a smaller image that fits
            Twitters needs.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.ProductTwitterCard.Label1">
            <summary>
            Gets or sets the first label and allows you to specify the types of data you want to offer (price, country, etc.).
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.ProductTwitterCard.Label2">
            <summary>
            Gets or sets the second label and allows you to specify the types of data you want to offer (price, country, etc.).
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.ProductTwitterCard.Title">
            <summary>
            Gets or sets the title of the summary. Title should be concise and will be truncated at 70 characters.
            If you are using Facebook's Open Graph og:title, do not use this unless you want a different title.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.ProductTwitterCard.Type">
            <summary>
            Gets the type of the Twitter card.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Twitter.ProductTwitterCard.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Twitter card meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Twitter.SummaryLargeImageTwitterCard">
            <summary>
            The Summary Card with Large Image features a large, full-width prominent image alongside a tweet. 
            It is designed to give the reader a rich photo experience, and clicking on the image brings the 
            user to your website. On twitter.com and the mobile clients, the image appears below the tweet text.
            See https://dev.twitter.com/cards/types/summary-large-image.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Twitter.SummaryLargeImageTwitterCard.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.Twitter.SummaryLargeImageTwitterCard" /> class.
            </summary>
            <param name="username">The Twitter username of the creator of the content on the page e.g. @RehanSaeedUK. This is an optional property.</param>
            <exception cref="T:System.ArgumentNullException">username is <c>null</c>.</exception>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.SummaryLargeImageTwitterCard.CreatorUsername">
            <summary>
            Gets or sets the Twitter username of the creator of the content on the page e.g. @RehanSaeedUK. This is an optional property.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.SummaryLargeImageTwitterCard.Description">
            <summary>
            Gets or sets the description that concisely summarizes the content of the page, as appropriate for 
            presentation within a Tweet. Do not re-use the title text as the description, or use this field 
            to describe the general services provided by the website. Description text will be truncated at 
            the word to 200 characters. If you are using Facebook's Open Graph og:description, do not use this
            unless you want a different description.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.SummaryLargeImageTwitterCard.Image">
            <summary>
            Gets or sets the URL to a unique image representing the content of the page. Do not use a generic 
            image such as your website logo, author photo, or other image that spans multiple pages. Images 
            for this Card should be at least 280px in width, and at least 150px in height. Image must be less 
            than 1MB in size. If you are using Facebook's Open Graph og:image, you do not have to use
            this unless you want a different image but it is recommended to get supply a smaller image that fits
            Twitters needs.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.SummaryLargeImageTwitterCard.Title">
            <summary>
            Gets or sets the title of the summary. Title should be concise and will be truncated at 70 characters.
            If you are using Facebook's Open Graph og:title, do not use this unless you want a different description.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.SummaryLargeImageTwitterCard.Type">
            <summary>
            Gets the type of the Twitter card.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Twitter.SummaryLargeImageTwitterCard.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Twitter card meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Twitter.SummaryTwitterCard">
            <summary>
            The Summary Card can be used for many kinds of web content, from blog posts and news articles, to 
            products and restaurants. It is designed to give the reader a preview of the content before clicking 
            through to your website. See https://dev.twitter.com/cards/types/summary.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Twitter.SummaryTwitterCard.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.Twitter.SummaryTwitterCard"/> class.
            </summary>
            <param name="username">The Twitter username associated with the page e.g. @RehanSaeedUK. This is a required property.</param>
            <exception cref="T:System.ArgumentNullException">username is <c>null</c>.</exception>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.SummaryTwitterCard.Description">
            <summary>
            Gets or sets the description that concisely summarizes the content of the page, as appropriate for 
            presentation within a Tweet. Do not re-use the title text as the description, or use this field 
            to describe the general services provided by the website. Description text will be truncated at 
            the word to 200 characters. If you are using Facebook's Open Graph og:description, do not use this
            unless you want a different description.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.SummaryTwitterCard.Image">
            <summary>
            Gets or sets the URL to a unique image representing the content of the page. Do not use a generic 
            image such as your website logo, author photo, or other image that spans multiple pages. The 
            image must be a minimum size of 120px by 120px and must be less than 1MB in file size. For an 
            expanded tweet and its detail page, the image will be cropped to a 4:3 aspect ratio and resized 
            to be displayed at 120px by 90px. The image will also be cropped and resized to 120px by 120px 
            for use in embedded tweets. If you are using Facebook's Open Graph og:image, you do not have to use
            this unless you want a different image but it is recommended to get supply a smaller image that fits
            Twitters needs.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.SummaryTwitterCard.Title">
            <summary>
            Gets or sets the title of the summary. Title should be concise and will be truncated at 70 characters.
            If you are using Facebook's Open Graph og:title, do not use this unless you want a different title.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.SummaryTwitterCard.Type">
            <summary>
            Gets the type of the Twitter card.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Twitter.SummaryTwitterCard.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Twitter card meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Twitter.HtmlHelperExtensions">
            <summary>
            Creates Twitter card meta tags. <see cref="M:Boilerplate.Web.Mvc.Twitter.HtmlHelperExtensions.TwitterCard(System.Web.Mvc.HtmlHelper,Boilerplate.Web.Mvc.Twitter.TwitterCard)"/> for more information.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Twitter.HtmlHelperExtensions.TwitterCard(System.Web.Mvc.HtmlHelper,Boilerplate.Web.Mvc.Twitter.TwitterCard)">
            <summary>
            Creates a string containing the Twitter card meta tags. <see cref="M:Boilerplate.Web.Mvc.Twitter.HtmlHelperExtensions.TwitterCard(System.Web.Mvc.HtmlHelper,Boilerplate.Web.Mvc.Twitter.TwitterCard)"/> for more information.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="twitterCard">The Twitter card metadata.</param>
            <returns>The meta tags.</returns>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Twitter.TwitterCard">
            <summary>
            With Twitter Cards, you can attach rich photos, videos and media experience to Tweets that drive traffic to your website. 
            Users who Tweet links to your content will have a "Card" added to the Tweet that’s visible to all of their followers.
            See https://dev.twitter.com/cards/overview.
            Sign up for Twitter Card analytics to see who is sharing your site pages on Twitter.
            See https://analytics.twitter.com/about
            Validate your Twitter cards.
            See https://twitter.com/login?redirect_after_login=https%3A%2F%2Fcards-dev.twitter.com%2Fvalidator
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Twitter.TwitterCard.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.Twitter.TwitterCard"/> class.
            </summary>
            <param name="username">The Twitter username associated with the page e.g. @RehanSaeedUK. This is a required property.</param>
            <exception cref="T:System.ArgumentNullException">username is <c>null</c>.</exception>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.TwitterCard.Type">
            <summary>
            Gets the type of the Twitter card.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.TwitterCard.Username">
            <summary>
            Gets the Twitter username associated with the page e.g. @RehanSaeedUK. This is a required property.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Twitter.TwitterCard.ToHtmlString">
            <summary>
            Returns an HTML-encoded string containing the Twitter card meta tags.
            </summary>
            <returns>An HTML-encoded string containing the Twitter card meta tags.</returns>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Twitter.TwitterCard.ToString">
            <summary>
            Returns a HTML-encoded <see cref="T:System.String" /> that represents this instance containing the Twitter card meta tags.
            </summary>
            <returns>
            A HTML-encoded <see cref="T:System.String" /> that represents this instance containing the Twitter card meta tags.
            </returns>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Twitter.TwitterCard.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Twitter card meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Twitter.TwitterCardType">
            <summary>
            The type of Twitter card.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Twitter.TwitterCardType.App">
            <summary>
            The App Card is a great way to represent mobile applications on Twitter and to drive installs. The app card 
            is designed to allow for a name, description and icon, and also to highlight attributes such as the rating 
            and the price. This Card type is currently available on the twitter.com website, as well as iOS and Android 
            mobile clients. It is not yet available on mobile web. See https://dev.twitter.com/cards/types/app.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Twitter.TwitterCardType.Gallery">
            <summary>
            The Gallery Card allows you to represent collections of photos within a Tweet. This Card type is 
            designed to let the user know that there’s more than just a single image at the URL shared, but 
            rather a gallery of related images. You can specify up to 4 different images to show in the gallery 
            card. You can also provide attribution to the photographer of the  gallery by specifying the value of the creator tag. 
            See https://dev.twitter.com/cards/types/gallery.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Twitter.TwitterCardType.Photo">
            <summary>
            The Photo Card puts the image front and center in the Tweet. Clicking on the photo expands it to a 
            richer, detailed view. On twitter.com and mobile clients, the image appears below the tweet text.
            See https://dev.twitter.com/cards/types/photo
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Twitter.TwitterCardType.Player">
            <summary>
            Video clips and audio streams have a special place on the Twitter platform thanks to the Player Card. By implementing a few HTML meta tags to 
            your website and following the Twitter Rules of the Road, you can deliver your rich media to users across the globe.
            Twitter must approve the use of the player card, find out more below.
            See https://dev.twitter.com/cards/types/player
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Twitter.TwitterCardType.Product">
            <summary>
            The Product Card is a great way to represent product and retail items on Twitter. This Card type is designed to showcase your products via an 
            image, a description, and allow you to highlight two other key details about your product.
            See https://dev.twitter.com/cards/types/product
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Twitter.TwitterCardType.Summary">
            <summary>
            The Summary Card can be used for many kinds of web content, from blog posts and news articles, to 
            products and restaurants. It is designed to give the reader a preview of the content before clicking 
            through to your website. See https://dev.twitter.com/cards/types/summary.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Twitter.TwitterCardType.SummaryLargeImage">
            <summary>
            The Summary Card with Large Image features a large, full-width prominent image alongside a tweet. 
            It is designed to give the reader a rich photo experience, and clicking on the image brings the 
            user to your website. On twitter.com and the mobile clients, the image appears below the tweet text.
            See https://dev.twitter.com/cards/types/summary-large-image.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Twitter.TwitterCardTypeExtensions">
            <summary>
            <see cref="T:Boilerplate.Web.Mvc.Twitter.TwitterCardType"/> extension methods.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Twitter.TwitterCardTypeExtensions.ToTwitterString(Boilerplate.Web.Mvc.Twitter.TwitterCardType)">
            <summary>
            Returns the Twitter specific <see cref="T:System.String" /> representation of the <see cref="T:Boilerplate.Web.Mvc.Twitter.TwitterCardType" />.
            </summary>
            <param name="twitterCardType">Type of the twitter card.</param>
            <returns>
            The Twitter specific <see cref="T:System.String" /> representation of the <see cref="T:Boilerplate.Web.Mvc.Twitter.TwitterCardType" />.
            </returns>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Twitter.TwitterPlayer">
            <summary>
            A video used in a Twitter card. If the iframe is wider than 435px, the iframe player will be resized to fit a 
            max width of 435px, maintaining the original aspect ratio.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Twitter.TwitterPlayer.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.Twitter.TwitterPlayer" /> class.
            </summary>
            <param name="playerUrl">The URL to an iframe player. This must be a HTTPS URL which does not generate active
            mixed content warnings in a web browser.</param>
            <param name="width">The width of the iFrame player in pixels.</param>
            <param name="height">The height of the iFrame player in pixels.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="playerUrl"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="width"/> and <paramref name="height"/> 
            must be more than zero.</exception>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Twitter.TwitterPlayer.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.Twitter.TwitterPlayer" /> class.
            </summary>
            <param name="playerUrl">The URL to an iframe player. This must be a HTTPS URL which does not generate active
            mixed content warnings in a web browser.</param>
            <param name="width">The width of the iFrame player in pixels.</param>
            <param name="height">The height of the iFrame player in pixels.</param>
            <param name="streamContentType">The MIME type/subtype combination that describes the content contained in 
            twitter:player:stream. Takes the form specified in RFC 6381. Currently supported content_type values are 
            those defined in RFC 4337 (MIME Type Registration for MP4).</param>
            <param name="streamUrl">The URL to a raw stream that will be rendered in Twitter’s mobile applications 
            directly. If provided, the stream must be delivered in the MPEG-4 container format (the.mp4 extension). The 
            container can store a mix of audio and video with the following codecs: Video: H.264, Baseline Profile(BP), 
            Level 3.0, up to 640 x 480 at 30 fps. Audio: AAC, Low Complexity Profile(LC).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="playerUrl"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="width"/> and <paramref name="height"/> 
            must be more than zero.</exception>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.TwitterPlayer.Height">
            <summary>
            Gets the height of the iFrame player in pixels.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.TwitterPlayer.PlayerUrl">
            <summary>
            Gets the URL to an iframe player. This must be a HTTPS URL which does not generate active 
            mixed content warnings in a web browser.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.TwitterPlayer.StreamContentType">
            <summary>
            Gets or sets the MIME type/subtype combination that describes the content contained in 
            twitter:player:stream. Takes the form specified in RFC 6381. Currently supported content_type values are 
            those defined in RFC 4337 (MIME Type Registration for MP4).
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.TwitterPlayer.StreamUrl">
            <summary>
            Gets or sets the URL to a raw stream that will be rendered in Twitter’s mobile applications directly. If 
            provided, the stream must be delivered in the MPEG-4 container format (the.mp4 extension). The container 
            can store a mix of audio and video with the following codecs: Video: H.264, Baseline Profile(BP), 
            Level 3.0, up to 640 x 480 at 30 fps. Audio: AAC, Low Complexity Profile(LC).
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.TwitterPlayer.Width">
            <summary>
            Gets the width of the iFrame player in pixels.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Twitter.TwitterImage">
            <summary>
            An image used in a Twitter card. The Image must be less than 1MB in size.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Twitter.TwitterImage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.Twitter.TwitterImage"/> class.
            </summary>
            <param name="imageUrl">The image URL. The Image must be less than 1MB in size.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Twitter.TwitterImage.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.Twitter.TwitterImage"/> class.
            </summary>
            <param name="imageUrl">The image URL. The Image must be less than 1MB in size.</param>
            <param name="width">The width of the image in pixels to help Twitter accurately preserve the aspect ratio 
            of the image when resizing. This property is optional.</param>
            <param name="height">The height of the image in pixels to help Twitter accurately preserve the aspect ratio 
            of the image when resizing. This property is optional.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.TwitterImage.Height">
            <summary>
            Gets or sets the height of the image in pixels to help Twitter accurately preserve the aspect ratio of 
            the image when resizing. This property is optional.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.TwitterImage.ImageUrl">
            <summary>
            Gets the image URL. The Image must be less than 1MB in size.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Twitter.TwitterImage.Width">
            <summary>
            Gets or sets the width of the image in pixels to help Twitter accurately preserve the aspect ratio of 
            the image when resizing. This property is optional.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphCondition">
            <summary>
            The condition of an item.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphCondition.New">
            <summary>
            The item is brand new.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphCondition.Refurbished">
            <summary>
            The the item is refurbished.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphCondition.Used">
            <summary>
            The the item is used.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphConditionExtensions">
            <summary>
            <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphCondition"/> extension methods.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphConditionExtensions.ToLowercaseString(Boilerplate.Web.Mvc.OpenGraph.OpenGraphCondition)">
            <summary>
            Returns the lowercase <see cref="T:System.String" /> representation of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphCondition" />.
            </summary>
            <param name="openGraphCondition">The open graph condition of the item.</param>
            <returns>
            The lowercase <see cref="T:System.String" /> representation of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphCondition" />.
            </returns>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphAvailability">
            <summary>
            The stock availability of the item.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphAvailability.InStock">
            <summary>
            The availability of the item is in stock.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphAvailability.OutOfStock">
            <summary>
            The availability of the item is out of stock
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphAvailability.Pending">
            <summary>
            The availability of the item is pending or unknown.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphAgeGroup">
            <summary>
            An Open Graph age group.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphAgeGroup.Adult">
            <summary>
            The adult age group.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphAgeGroup.Kids">
            <summary>
            The kids age group.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphAvailabilityExtensions">
            <summary>
            <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphAvailability"/> extension methods.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphAvailabilityExtensions.ToLowercaseString(Boilerplate.Web.Mvc.OpenGraph.OpenGraphAvailability)">
            <summary>
            Returns the lowercase <see cref="T:System.String" /> representation of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphAvailability" />.
            </summary>
            <param name="openGraphAvailability">The open graph availability.</param>
            <returns>
            The lowercase <see cref="T:System.String" /> representation of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphAvailability" />.
            </returns>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphAgeGroupExtensions">
            <summary>
            <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphAgeGroup"/> extension methods.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphAgeGroupExtensions.ToLowercaseString(Boilerplate.Web.Mvc.OpenGraph.OpenGraphAgeGroup)">
            <summary>
            Returns the lowercase <see cref="T:System.String" /> representation of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphAgeGroup" />.
            </summary>
            <param name="openGraphAgeGroup">The open graph age group.</param>
            <returns>
            The lowercase <see cref="T:System.String" /> representation of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphAgeGroup" />.
            </returns>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphTargetGender">
            <summary>
            The gender being targeted.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphTargetGender.Male">
            <summary>
            The male gender.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphTargetGender.Female">
            <summary>
            The female gender.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphTargetGender.Unisex">
            <summary>
            Both genders are being targeted.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphTargetGenderExtensions">
            <summary>
            <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphGender"/> extension methods.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphTargetGenderExtensions.ToLowercaseString(Boilerplate.Web.Mvc.OpenGraph.OpenGraphTargetGender)">
            <summary>
            Returns the lowercase <see cref="T:System.String" /> representation of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphTargetGender" />.
            </summary>
            <param name="gender">The gender being targeted.</param>
            <returns>
            The lowercase <see cref="T:System.String" /> representation of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphTargetGender" />.
            </returns>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurant">
            <summary>
            This object type represents a restaurant at a specific location. This object type is not part of the Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/restaurant.restaurant/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurant.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,Boilerplate.Web.Mvc.OpenGraph.OpenGraphLocation,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurant" /> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="location">The location of the business.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
            <exception cref="T:System.ArgumentNullException">location is <c>null</c>.</exception>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurant.Categories">
            <summary>
            Gets or sets a collection of categories describing this restaurant's food.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurant.ContactInfo">
            <summary>
            Gets or sets the contact information for the restaurant.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurant.Location">
            <summary>
            Gets the location of the place.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurant.MenuUrls">
            <summary>
            Gets or sets the URL's to the pages about the menus. This URL must contain restaurant.menu meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenu"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurant.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurant.PriceRating">
            <summary>
            Gets or sets the price rating for this restaurant (from 1 to 4).
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurant.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurant.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct">
            <summary>
            This object type represents a product. This includes both virtual and physical products, but it typically represents items that are available in 
            an online store. This object type is not part of the Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/product/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct" /> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.AgeGroup">
            <summary>
            Gets or sets the target age group of the product, one of 'kids' or 'adult'.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.Availability">
            <summary>
            Gets or sets the availability of the product, one of 'instock', 'oos', or 'pending'.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.Brand">
            <summary>
            Gets or sets the brand of the product or its original manufacturer.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.Category">
            <summary>
            Gets or sets the category for the product.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.Colour">
            <summary>
            Gets or sets the colour of the product.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.Condition">
            <summary>
            Gets or sets the condition of the item, one of 'new', 'refurbished', or 'used'.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.EAN">
            <summary>
            Gets or sets an International Article Number, or European Article Number (EAN), for the product.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.ExpirationTime">
            <summary>
            Gets or sets a time representing when the product expired (or will expire).
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.IsShareable">
            <summary>
            Gets or sets a value indicating whether the associated story has a share button on it.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.ISBN">
            <summary>
            Gets or sets a International Standard Book Number (ISBN) for the product, intended for when it is a book.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.ManufacturerPartNumber">
            <summary>
            Gets or sets the manufacturers part number for the product.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.Material">
            <summary>
            Gets or sets a description of the material used to make the product.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.OriginalPrices">
            <summary>
            Gets or sets the original prices of the product.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.Pattern">
            <summary>
            Gets or sets a description of the pattern used on the product.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.PluralTitle">
            <summary>
            Gets or sets a title to be used to describe multiple items of this product.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.PretaxPrices">
            <summary>
            Gets or sets the pre-tax prices of the product.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.Prices">
            <summary>
            Gets or sets the prices of the product.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.ProductLinkUrl">
            <summary>
            Gets or sets a URL link to find out more about the product
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.PurchaseLimit">
            <summary>
            Gets or sets the maximum number of times a person can purchase the product.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.RetailerUrl">
            <summary>
            Gets or sets the URL to the page about the retailer of the product. This URL must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.RetailerCategory">
            <summary>
            Gets or sets the retailer's category for the product.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.RetailerPartNumber">
            <summary>
            Gets or sets the retailer's part number for the product.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.RetailerTitle">
            <summary>
            Gets or sets the name of the retailer of the product.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.SalePrice">
            <summary>
            Gets or sets the sale price of the product.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.SalePriceDates">
            <summary>
            Gets or sets the date range for which the sale price is valid.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.ShippingCost">
            <summary>
            Gets or sets the shipping cost of the product.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.ShippingWeight">
            <summary>
            Gets or sets the shipping weight of the product.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.Size">
            <summary>
            Gets or sets a size describing the product(such as 'S', 'M', 'L').
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.TargetGender">
            <summary>
            Gets or sets the target gender for the product.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.UPC">
            <summary>
            Gets or sets a Universal Product Code(UPC) for the product.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.Weight">
            <summary>
            Gets or sets the weight of the product.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProduct.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem">
            <summary>
            This object type represents a product item. This object type is not part of the Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/product.item/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,Boilerplate.Web.Mvc.OpenGraph.OpenGraphAvailability,Boilerplate.Web.Mvc.OpenGraph.OpenGraphCondition,System.Collections.Generic.IEnumerable{Boilerplate.Web.Mvc.OpenGraph.OpenGraphCurrency},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem" /> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="availability">The availability of the item, one of 'instock', 'oos', or 'pending'.</param>
            <param name="condition">The condition of the item, one of 'new', 'refurbished', or 'used'.</param>
            <param name="prices">The prices of the item.</param>
            <param name="retailerItemId">The retailer's ID for the item.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
            <exception cref="T:System.ArgumentNullException">prices or retailerItemId is <c>null</c>.</exception>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.AgeGroup">
            <summary>
            Gets or sets the target age group of the item, one of 'kids' or 'adult'.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.Availability">
            <summary>
            Gets the availability of the item, one of 'instock', 'oos', or 'pending'.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.Brand">
            <summary>
            Gets or sets the brand of the item or its original manufacturer.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.Category">
            <summary>
            Gets or sets the category for the item.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.Colour">
            <summary>
            Gets or sets the colour of the item.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.Condition">
            <summary>
            Gets the condition of the item, one of 'new', 'refurbished', or 'used'.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.ExpirationTime">
            <summary>
            Gets or sets a time representing when the item expired (or will expire).
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.GroupUrl">
            <summary>
            Gets or sets the URL to the page about the product group. This URL must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductGroup"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.GTIN">
            <summary>
            Gets or sets the Global Trade Item Number (GTIN), which encompasses UPC, EAN, JAN, and ISBN.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.ManufacturerPartNumber">
            <summary>
            Gets or sets the manufacturers part number for the item.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.Material">
            <summary>
            Gets or sets a description of the material used to make the item.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.Pattern">
            <summary>
            Gets or sets a description of the pattern used on the item.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.Prices">
            <summary>
            Gets the prices of the item.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.RetailerCategory">
            <summary>
            Gets or sets the retailer's category for the item.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.RetailerGroupId">
            <summary>
            Gets or sets the retailer product group ID for this item.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.RetailerItemId">
            <summary>
            Gets the retailer's ID for the item.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.SalePrice">
            <summary>
            Gets or sets the sale price of the item.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.SalePriceDates">
            <summary>
            Gets or sets the date range for which the sale price is valid.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.ShippingCost">
            <summary>
            Gets or sets the shipping cost of the item.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.ShippingWeight">
            <summary>
            Gets or sets the shipping weight of the item.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.Size">
            <summary>
            Gets or sets a size describing the item (such as 'S', 'M', 'L').
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.TargetGender">
            <summary>
            Gets or sets the target gender for the item.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductItem.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductGroup">
            <summary>
            This object type represents a group of product items. This object type is not part of the Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/product.group/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductGroup.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductGroup" /> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductGroup.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductGroup.RetailerGroupId">
            <summary>
            Gets or sets the retailer's ID for the product group.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductGroup.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProductGroup.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenu">
            <summary>
            This object type represents a restaurant's menu. A restaurant can have multiple menus, and each menu has multiple sections.
            This object type is not part of the Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/restaurant.menu/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenu.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenu" /> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="restaurantUrl">The URL to the page about the restaurant who wrote the menu. This URL must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurant"/>.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
            <exception cref="T:System.ArgumentNullException">location is <c>null</c>.</exception>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenu.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenu.RestaurantUrl">
            <summary>
            Gets the URL to the page about the restaurant who wrote the menu. This URL must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurant"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenu.SectionUrls">
            <summary>
            Gets or sets the URL's to the pages about the menu sections. This URL must contain restaurant.section meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenuSection"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenu.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenu.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenuItem">
            <summary>
            This object type represents a single item on a restaurant's menu. Every item belongs within a menu section.
            This object type is not part of the Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/restaurant.menu_item/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenuItem.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenuItem" /> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="sectionUrl">The URL to the page about the section this menu item is from. This URL must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenuSection"/>.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
            <exception cref="T:System.ArgumentNullException">location is <c>null</c>.</exception>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenuItem.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenuItem.SectionUrl">
            <summary>
            Gets the URL to the page about the section this menu item is from. This URL must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenuSection"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenuItem.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenuItem.Variations">
            <summary>
            Gets or sets the variations of this menu item.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenuItem.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenuSection">
            <summary>
            This object type represents a restaurant's menu. A restaurant can have multiple menus, and each menu has multiple sections.
            This object type is not part of the Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/restaurant.menu_section/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenuSection.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenuSection" /> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="menuUrl">The URL to the page about the menu this section is from. This URL must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenu"/>.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
            <exception cref="T:System.ArgumentNullException">location is <c>null</c>.</exception>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenuSection.ItemUrls">
            <summary>
            Gets or sets the URL's to the pages about the menu items. This URL must contain restaurant.menuitem meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenuItem"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenuSection.MenuUrl">
            <summary>
            Gets the URL to the page about the menu this section is from. This URL must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenu"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenuSection.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenuSection.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRestaurantMenuSection.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata">
            <summary>
            The Open Graph protocol enables any web page to become a rich object in a social graph. 
            For instance, this is used on Facebook to allow any web page to have the same functionality 
            as any other object on Facebook.
            See http://ogp.me for the official Open Graph specification documentation.
            See https://developers.facebook.com/docs/sharing/opengraph for Facebook Open Graph documentation.
            See https://www.facebook.com/login.php?next=https%3A%2F%2Fdevelopers.facebook.com%2Ftools%2Fdebug%2F for the Open Graph debugging tool to test and verify your Open Graph implementation.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata" /> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
            <exception cref="T:System.ArgumentNullException">title or image is <c>null</c>.</exception>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata.AlternateLocales">
            <summary>
            Gets or sets the collection of alternate locales this page is available in.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata.Audio">
            <summary>
            Gets the audio files which should represent your object within the graph. Use the Media property to add an audio file.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata.Description">
            <summary>
            Gets or sets a one to two sentence description of your object. Only set this value if it is different from the <![CDATA[<meta name="description" content="blah blah">]]> meta tag. Right now Facebook only displays the first 300 characters of a description.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata.Determiner">
            <summary>
            Gets or sets the word that appears before this object's title in a sentence. An enum of (a, an, the, "", auto). 
            If auto is chosen, the consumer of your data should chose between "a" or "an". Default is "" (blank).
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata.FacebookAdministrators">
            <summary>
            Gets or sets the list of facebook ID's of the administrators. 
            Use this or <see cref="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata.FacebookAdministrators"/>, not both. <see cref="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata.FacebookAdministrators"/> is the preferred method.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata.FacebookApplicationId">
            <summary>
            Gets or sets the facebook application identifier that identifies your website to Facebook. 
            Use this or <see cref="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata.FacebookAdministrators"/>, not both. Go to https://developers.facebook.com/ to
            create a developer account, go to the apps tab to create a new app, which will give you this ID.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata.FacebookProfileId">
            <summary>
            Gets or sets the unique identifier of the Facebook profile for the current object.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata.Images">
            <summary>
            Gets the images which should represent your object within the graph. Use the Media property to add an image.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata.Locale">
            <summary>
            Gets or sets the locale these tags are marked up in. Of the format language_TERRITORY. Default is en_US.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata.Media">
            <summary>
            Gets the images, videos or audio which should represent your object within the graph.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata.SeeAlso">
            <summary>
            Gets or sets the list of URL's used to supply an additional link that shows related content to the object. This property is not part of the 
            Open Graph standard but is used by Facebook.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata.SiteName">
            <summary>
            Gets or sets the name of the site. if your object is part of a larger web site, the name which should be displayed 
            for the overall site. e.g. "IMDb".
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata.Title">
            <summary>
            Gets the title of your object as it should appear within the graph, e.g. "The Rock".
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata.Url">
            <summary>
            Gets the canonical URL of your object that will be used as its permanent ID in the graph, e.g. "http://www.imdb.com/title/tt0117500/".
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata.Videos">
            <summary>
            Gets the videos which should represent your object within the graph. Use the Media property to add a video file.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata.ToHtmlString">
            <summary>
            Returns an HTML-encoded string containing the Open Graph meta tags.
            </summary>
            <returns>An HTML-encoded string containing the Open Graph meta tags.</returns>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata.ToString">
            <summary>
            Returns a HTML-encoded <see cref="T:System.String" /> that represents this instance containing the Open Graph meta tags.
            </summary>
            <returns>
            A HTML-encoded <see cref="T:System.String" /> that represents this instance containing the Open Graph meta tags.
            </returns>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.DayOfWeekExtensions">
            <summary>
            <see cref="T:System.DayOfWeek"/> extension methods.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.DayOfWeekExtensions.ToLowercaseString(System.DayOfWeek)">
            <summary>
            Returns the lowercase <see cref="T:System.String" /> representation of the <see cref="T:System.DayOfWeek" />.
            </summary>
            <param name="dayOfWeek">The day of week.</param>
            <returns>
            The lowercase <see cref="T:System.String" /> representation of the <see cref="T:System.DayOfWeek" />.
            </returns>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphDeterminer">
            <summary>
            The word that appears before the title.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphDeterminer.Blank">
            <summary>
            There is no word, it is blank.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphDeterminer.A">
            <summary>
            Use the word 'A'.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphDeterminer.An">
            <summary>
            Use the word 'An'.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphDeterminer.The">
            <summary>
            Use the word 'The'.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphDeterminer.Auto">
            <summary>
            Automatically select the word for you.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphDeterminerExtensions">
            <summary>
            <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphDeterminer"/> extension methods.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphDeterminerExtensions.ToLowercaseString(Boilerplate.Web.Mvc.OpenGraph.OpenGraphDeterminer)">
            <summary>
            Returns the lowercase <see cref="T:System.String" /> representation of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphDeterminer" />.
            </summary>
            <param name="determiner">The determiner word to display before the title.</param>
            <returns>
            The lowercase <see cref="T:System.String" /> representation of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphDeterminer" />.
            </returns>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphGender">
            <summary>
            The gender or sex.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphGender.Male">
            <summary>
            The male gender.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphGender.Female">
            <summary>
            The female gender.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphGenderExtensions">
            <summary>
            <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphGender"/> extension methods.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphGenderExtensions.ToLowercaseString(Boilerplate.Web.Mvc.OpenGraph.OpenGraphGender)">
            <summary>
            Returns the lowercase <see cref="T:System.String" /> representation of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphGender" />.
            </summary>
            <param name="gender">The gender.</param>
            <returns>
            The lowercase <see cref="T:System.String" /> representation of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphGender" />.
            </returns>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicReleaseType">
            <summary>
            How the music is released.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicReleaseType.OriginalRelease">
            <summary>
            This is the first original release.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicReleaseType.ReRelease">
            <summary>
            This is a re-release of the music.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicReleaseType.Anthology">
            <summary>
            This is an anthology.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicReleaseTypeExtensions">
            <summary>
            <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicReleaseType"/> extension methods.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicReleaseTypeExtensions.ToLowercaseString(Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicReleaseType)">
            <summary>
            Returns the lowercase <see cref="T:System.String" /> representation of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicReleaseType" />.
            </summary>
            <param name="musicReleaseType">Type of the music release.</param>
            <returns>
            The lowercase <see cref="T:System.String" /> representation of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicReleaseType" />.
            </returns>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType">
            <summary>
            An Open Graph type.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.Article">
            <summary>
            This object represents an article on a website. It is the preferred type for blog posts and news stories.
            This object type is part of the Open Graph standard.
            See http://ogp.me/
            See https://developers.facebook.com/docs/reference/opengraph/object-type/article/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.Book">
            <summary>
            This object represents a physical book or e-book. This object type is part of the Open Graph standard but
            Facebook uses the books.book object type instead which requires an ISBN number.
            See http://ogp.me/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.BooksAuthor">
            <summary>
            This object represents a single author of a book. This object type is not part of the Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/books.author/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.BooksBook">
            <summary>
            This object represents a single book or publication. This is an appropriate type for ebooks, as well as traditional paperback or hardback books.
            This object type is not part of the Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/books.book/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.BooksGenre">
            <summary>
            This object type represents the genre of a book or publication. This object type is not part of the Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/books.genre/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.Business">
            <summary>
            This object type represents a place of business that has a location, operating hours and contact information. This object type is not part of 
            the Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/business.business/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.FitnessCourse">
            <summary>
            This object type represents the user's activity contributing to a particular run, walk, or bike course. This object type is not part of the 
            Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/fitness.course/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.GameAchievement">
            <summary>
            This object type represents a specific achievement in a game. An app must be in the 'Games' category in App Dashboard to be able to use this 
            object type. Every achievement has a game:points value associate with it. This is not related to the points the user has scored in the game, but 
            is a way for the app to indicate the relative importance and scarcity of different achievements: * Each game gets a total of 1,000 points to 
            distribute across its achievements * Each game gets a maximum of 1,000 achievements * Achievements which are scarcer and have higher point 
            values will receive more distribution in Facebook's social channels. For example, achievements which have point values of less than 10 will get 
            almost no distribution. Apps should aim for between 50-100 achievements consisting of a mix of 50 (difficult), 25 (medium), and 10 (easy) point 
            value achievements Read more on how to use achievements in this guide. This object type is not part of the Open Graph standard but is used by 
            Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/game.achievement/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.MusicAlbum">
            <summary>
            This object represents a music album; in other words, an ordered collection of songs from an artist or a collection of artists. An album can 
            comprise multiple discs. This object type is part of the Open Graph standard.
            See http://ogp.me/
            See https://developers.facebook.com/docs/reference/opengraph/object-type/music.album/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.MusicPlaylist">
            <summary>
            This object represents a music playlist, an ordered collection of songs from a collection of artists. This object type is part of the Open 
            Graph standard.
            See http://ogp.me/
            See https://developers.facebook.com/docs/reference/opengraph/object-type/music.playlist/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.MusicRadioStation">
            <summary>
            This object represents a 'radio' station of a stream of audio. The audio properties should be used to identify the location of the stream itself. 
            This object type is part of the Open Graph standard.
            See http://ogp.me/
            See https://developers.facebook.com/docs/reference/opengraph/object-type/music.radio_station/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.MusicSong">
            <summary>
            This object represents a single song. This object type is part of the Open Graph standard.
            See http://ogp.me/
            https://developers.facebook.com/docs/reference/opengraph/object-type/music.song/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.Place">
            <summary>
            This object type represents a place - such as a venue, a business, a landmark, or any other location which can be identified by longitude and 
            latitude. This object type is not part of the Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/place/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.Product">
            <summary>
            This object type represents a product. This includes both virtual and physical products, but it typically represents items that are available in 
            an online store. This object type is not part of the Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/product/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.ProductGroup">
            <summary>
            This object type represents a group of product items. This object type is not part of the Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/product.group/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.ProductItem">
            <summary>
            This object type represents a product item. This object type is not part of the Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/product.item/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.Profile">
            <summary>
            This object type represents a person. While appropriate for celebrities, artists, or musicians, this object type can be used for the profile of 
            any individual. This object type is part of the Open Graph standard.
            See http://ogp.me/
            See https://developers.facebook.com/docs/reference/opengraph/object-type/profile/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.Restaurant">
            <summary>
            This object type represents a restaurant at a specific location. This object type is not part of the Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/restaurant.restaurant/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.RestaurantMenu">
            <summary>
            This object type represents a restaurant's menu. A restaurant can have multiple menus, and each menu has multiple sections.
            This object type is not part of the Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/restaurant.menu/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.RestaurantMenuItem">
            <summary>
            This object type represents a single item on a restaurant's menu. Every item belongs within a menu section.
            This object type is not part of the Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/restaurant.menu_item/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.RestaurantMenuSection">
            <summary>
            This object type represents a restaurant's menu. A restaurant can have multiple menus, and each menu has multiple sections.
            This object type is not part of the Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/restaurant.menu_section/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.VideoEpisode">
            <summary>
            This object type represents an episode of a TV show and contains references to the actors and other professionals involved in its production. 
            An episode is defined by us as a full-length episode that is part of a series. This type must reference the series this it is part of.
            This object type is part of the Open Graph standard.
            See http://ogp.me/
            See https://developers.facebook.com/docs/reference/opengraph/object-type/video.episode/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.VideoMovie">
            <summary>
            This object type represents a movie, and contains references to the actors and other professionals involved in its production. A movie is 
            defined by us as a full-length feature or short film. Do not use this type to represent movie trailers, movie clips, user-generated video 
            content, etc. This object type is part of the Open Graph standard.
            See http://ogp.me/
            See https://developers.facebook.com/docs/reference/opengraph/object-type/video.movie/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.VideoTvShow">
            <summary>
            This object type represents a generic video, and contains references to the actors and other professionals involved in its production. For 
            specific types of video content, use the video.movie or video.tv_show object types. This type is for any other type of video content not 
            represented elsewhere (eg. trailers, music videos, clips, news segments etc.). This object type is part of the Open Graph standard.
            See http://ogp.me/
            See https://developers.facebook.com/docs/reference/opengraph/object-type/video.other/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.VideoOther">
            <summary>
            This object type represents a TV show, and contains references to the actors and other professionals involved in its production. For individual 
            episodes of a series, use the video.episode object type. A TV show is defined by us as a series or set of episodes that are produced under the 
            same title (eg. a television or online series). This object type is part of the Open Graph standard.
            See http://ogp.me/
            See https://developers.facebook.com/docs/reference/opengraph/object-type/video.tv_show/
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType.Website">
            <summary>
            An object representing a website. This object type is part of the Open Graph standard.
            See http://ogp.me/
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphTypeExtensions">
            <summary>
            <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType"/> extension methods.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphTypeExtensions.ToLowercaseString(Boilerplate.Web.Mvc.OpenGraph.OpenGraphType)">
            <summary>
            Returns the lowercase <see cref="T:System.String"/> representation of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>The lowercase <see cref="T:System.String"/> representation of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphType"/>.</returns>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.HtmlHelperExtensions">
            <summary>
            Creates Open Graph meta tags. <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata"/> for more information.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.HtmlHelperExtensions.OpenGraph(System.Web.Mvc.HtmlHelper,Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata)">
            <summary>
            Creates a string containing the Open Graph meta tags (Also used by Facebook). <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata"/> for more information.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="openGraphMetadata">The open graph metadata.</param>
            <returns>The meta tags.</returns>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.HtmlHelperExtensions.OpenGraphNamespace(System.Web.Mvc.HtmlHelper,Boilerplate.Web.Mvc.OpenGraph.OpenGraphMetadata)">
            <summary>
            Creates a <see cref="T:System.String"/> representing the Open Graph, Facebook and object namespaces. The namespaces are added to the HTML head element.
            </summary>
            <param name="htmlHelper">The HTML helper.</param>
            <param name="openGraphMetadata">The open graph metadata.</param>
            <returns>The Open Graph namespaces.</returns>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphAudio">
            <summary>
            A audio file that complements this object.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphAudio.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphAudio"/> class.
            </summary>
            <param name="audioUrl">The audio URL.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if audioUrl is <c>null</c>.</exception>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphAudio.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphAudio"/> class.
            </summary>
            <param name="mediaUrl">The media URL.</param>
            <param name="type">The MIME type of the media e.g. media/ogg. This is optional if your media URL ends with 
            a file extension, otherwise it is recommended.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="mediaUrl"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphAudio.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage">
            <summary>
            An image which should represent your object within the graph. Use images that are at least 1200 x 630 pixels 
            for the best display on high resolution devices. At the minimum, you should use images that are 600 x 315 pixels 
            to display link page posts with larger images. If your image is smaller than 600 x 315 pixels, it will still 
            display in the link page post, but the size will be much smaller.  Try to keep your images as close to 
            1.91:1 aspect ratio as possible to display the full image in News Feed without any cropping. The minimum size 
            of an image is 200 x 200. If you try to use an image smaller than this you will see an error in the URL Debugger.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage"/> class.
            </summary>
            <param name="imageUrl">The image URL.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if imageUrl is <c>null</c>.</exception>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage"/> class.
            </summary>
            <param name="imageUrl">The media URL.</param>
            <param name="type">The MIME type of the media e.g. media/jpeg. This is optional if your media URL ends with 
            a file extension, otherwise it is recommended.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="imageUrl"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage"/> class.
            </summary>
            <param name="imageUrl">The media URL.</param>
            <param name="width">The width of the media in pixels. This is optional.</param>
            <param name="height">The height of the media in pixels. This is optional.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="imageUrl"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage"/> class.
            </summary>
            <param name="imageUrl">The media URL.</param>
            <param name="type">The MIME type of the media e.g. media/jpeg. This is optional if your media URL ends with 
            a file extension, otherwise it is recommended.</param>
            <param name="width">The width of the media in pixels. This is optional.</param>
            <param name="height">The height of the media in pixels. This is optional.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="imageUrl"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMedia">
            <summary>
            An media which should represent your object within the graph.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMedia.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMedia"/> class.
            </summary>
            <param name="mediaUrl">The media URL.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if mediaUrl is <c>null</c>.</exception>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMedia.Type">
            <summary>
            Gets or sets the MIME type of the media e.g. media/jpeg. This is optional if your media URL ends with a file extension, 
            otherwise it is recommended.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMedia.Url">
            <summary>
            Gets the absolute HTTP media URL which should represent your object within the graph.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMedia.UrlSecure">
            <summary>
            Gets the absolute HTTPS media URL which should represent your object within the graph.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMedia.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphPreviewAudio">
            <summary>
            A audio file that complements this object. Only to be used with <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicSong"/>.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphPreviewAudio.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphPreviewAudio"/> class.
            </summary>
            <param name="audioUrl">The audio URL.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if audioUrl is <c>null</c>.</exception>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphPreviewAudio.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphPreviewAudio"/> class.
            </summary>
            <param name="mediaUrl">The media URL.</param>
            <param name="type">The MIME type of the media e.g. media/ogg. This is optional if your media URL ends with 
            a file extension, otherwise it is recommended.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="mediaUrl"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphPreviewAudio.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphSizedMedia">
            <summary>
            <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMedia"/> with a height and width, like a video or image.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphSizedMedia.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphSizedMedia"/> class.
            </summary>
            <param name="mediaUrl">The media URL.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if mediaUrl is <c>null</c>.</exception>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphSizedMedia.Height">
            <summary>
            Gets or sets the height of the media in pixels. This is optional.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphSizedMedia.Width">
            <summary>
            Gets or sets the width of the media in pixels. This is optional.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideo">
            <summary>
            A video file that complements this object.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideo"/> class.
            </summary>
            <param name="videoUrl">The video URL.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="videoUrl"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideo"/> class.
            </summary>
            <param name="videoUrl">The video URL.</param>
            <param name="type">The MIME type of the video e.g. media/mpg. This is optional if your video URL ends with 
            a file extension, otherwise it is recommended.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="videoUrl"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideo.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideo"/> class.
            </summary>
            <param name="videoUrl">The video URL.</param>
            <param name="width">The width of the video in pixels. This is optional.</param>
            <param name="height">The height of the video in pixels. This is optional.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="videoUrl"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideo.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideo"/> class.
            </summary>
            <param name="videoUrl">The video URL.</param>
            <param name="type">The MIME type of the video e.g. media/mpg. This is optional if your video URL ends with 
            a file extension, otherwise it is recommended.</param>
            <param name="width">The width of the video in pixels. This is optional.</param>
            <param name="height">The height of the video in pixels. This is optional.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="videoUrl"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideo.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksAuthor">
            <summary>
            This object represents a single author of a book. This object type is not part of the Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/books.author/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksAuthor.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksAuthor"/> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksAuthor.BookUrls">
            <summary>
            Gets or sets the URL's to the pages about the books written by the author. This URL must contain books.book meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksBook"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksAuthor.Gender">
            <summary>
            Gets or sets the authors gender.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksAuthor.GenreUrls">
            <summary>
            Gets or sets the URL's to the pages about the genres of books the author typically writes. This URL must contain books.genre meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksGenre"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksAuthor.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksAuthor.OfficialSiteUrl">
            <summary>
            Gets or sets the official site URL of the author.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksAuthor.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksAuthor.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksBook">
            <summary>
            This object represents a single book or publication. This is an appropriate type for ebooks, as well as traditional paperback or hardback books.
            This object type is not part of the Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/books.book/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksBook.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksBook" /> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="isbn">The books unique ISBN number.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksBook.AuthorUrls">
            <summary>
            Gets or sets the URL's to the pages about the authors of the book. This URL must contain books.author meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksAuthor"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksBook.GenreUrls">
            <summary>
            Gets or sets the URL's to the pages about the genres of the book. This URL must contain books.genre meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksGenre"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksBook.InitialReleaseDate">
            <summary>
            Gets or sets the initial release date of the book.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksBook.ISBN">
            <summary>
            Gets the books unique ISBN number.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksBook.Language">
            <summary>
            Gets or sets the language of the book in the format language_TERRITORY.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksBook.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksBook.PageCount">
            <summary>
            Gets or sets the number of pages in the book.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksBook.Rating">
            <summary>
            Gets or sets the rating of the book.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksBook.ReleaseDate">
            <summary>
            Gets or sets the release date of the book.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksBook.SampleUrl">
            <summary>
            Gets or sets the URL to a sample of the book.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksBook.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksBook.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksGenre">
            <summary>
            This object type represents the genre of a book or publication. This object type is not part of the Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/books.genre/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksGenre.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksGenre"/> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="canonicalName">THe genres canonical name. Only one of the following names is allowed Adventure, Children's Fiction, Drama, Erotica, Essays, Fantasy, Gay &amp; Lesbian, Graphic Novels, Historical Fiction, Horror, Fiction &amp; Literature, Mystery, Mythology &amp; Folklore, Poetry, Religious &amp; Inspiratonal, Rhetoric &amp; Critcism, Romance, Satire &amp; Humor, Science Fiction, Thrillers &amp; Suspense, Westerns, Women&#039;s Fiction, Young Adult Fiction, Biography &amp; Memoir, Current Affairs &amp; Politics, Genealogy, Geography, History, History of the Ancient World, History of Africa, History of Asia, History of Europe, History of North America, History of South America, Travel, Bibliographies, Children&#039;s Non-fiction, Computer Science, Encyclopedias, General Collections, Gift Books, Information Sciences, Journalism &amp; Publishing, Magazines &amp; Journals, Manuscripts &amp; Rare Books, Epistemology, Ethics, Logic, Metaphysics, Philosophy, Parapsychology &amp; Occultism, Psychology, Self-help, Bible, Comparative Religions, Natural Theory, Theology, Business, Customs &amp; Etiquette, Economics, Education, Finance, Gay &amp; Lesbian Non-Fiction, Gender Studies, Law, Political Science, Social Sciences, Social Services, Statistics, True Crime, English &amp; Old English, French, German, Greek, Italian, Language, Latin, Linguistics, Other Languages, Portugese, Spanish, Astronomy, Chemistry, Earth Sciences, Life Sciences, Mathematics, Paleontology &amp; Paleozoology, Physics, Plants Sciences, Zoology, Agriculture, Chemical Engineering, Engineering &amp; Opera?ons, Management, Manufacturing, Medical Sciences, Technology, Cooking &amp; Cookbooks, Gardening, Home Decorating, Home Economics, Parenting, Pets, Architecture, Design, Drawing, Fine Art, Gardening, Graphic Art, Music, Painting, Performing Arts, Photography, Sculpture, Games, Fitness, Health and Sports.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksGenre.AuthorUrls">
            <summary>
            Gets or sets the URL's to the pages about the authors who wrote the books. This URL must contain books.book meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksAuthor"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksGenre.BookUrls">
            <summary>
            Gets or sets the URL's to the pages about the books written by the author. This URL must contain books.book meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksBook"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksGenre.CanonicalName">
            <summary>
            Gets the canonical name of the genre. Only one of the following names is allowed Adventure, Children's Fiction, Drama, Erotica, Essays, Fantasy, Gay &amp; Lesbian, Graphic Novels, Historical Fiction, Horror, Fiction &amp; Literature, Mystery, Mythology &amp; Folklore, Poetry, Religious &amp; Inspiratonal, Rhetoric &amp; Critcism, Romance, Satire &amp; Humor, Science Fiction, Thrillers &amp; Suspense, Westerns, Women&#039;s Fiction, Young Adult Fiction, Biography &amp; Memoir, Current Affairs &amp; Politics, Genealogy, Geography, History, History of the Ancient World, History of Africa, History of Asia, History of Europe, History of North America, History of South America, Travel, Bibliographies, Children&#039;s Non-fiction, Computer Science, Encyclopedias, General Collections, Gift Books, Information Sciences, Journalism &amp; Publishing, Magazines &amp; Journals, Manuscripts &amp; Rare Books, Epistemology, Ethics, Logic, Metaphysics, Philosophy, Parapsychology &amp; Occultism, Psychology, Self-help, Bible, Comparative Religions, Natural Theory, Theology, Business, Customs &amp; Etiquette, Economics, Education, Finance, Gay &amp; Lesbian Non-Fiction, Gender Studies, Law, Political Science, Social Sciences, Social Services, Statistics, True Crime, English &amp; Old English, French, German, Greek, Italian, Language, Latin, Linguistics, Other Languages, Portugese, Spanish, Astronomy, Chemistry, Earth Sciences, Life Sciences, Mathematics, Paleontology &amp; Paleozoology, Physics, Plants Sciences, Zoology, Agriculture, Chemical Engineering, Engineering &amp; Opera?ons, Management, Manufacturing, Medical Sciences, Technology, Cooking &amp; Cookbooks, Gardening, Home Decorating, Home Economics, Parenting, Pets, Architecture, Design, Drawing, Fine Art, Gardening, Graphic Art, Music, Painting, Performing Arts, Photography, Sculpture, Games, Fitness, Health and Sports.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksGenre.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksGenre.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBooksGenre.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBusiness">
            <summary>
            This object type represents a place of business that has a location, operating hours and contact information. This object type is not part of 
            the Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/business.business/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBusiness.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,Boilerplate.Web.Mvc.OpenGraph.OpenGraphContactData,Boilerplate.Web.Mvc.OpenGraph.OpenGraphLocation,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBusiness" /> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="contactData">The contact data for the business.</param>
            <param name="location">The location of the business.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
            <exception cref="T:System.ArgumentNullException">contactData or location is <c>null</c>.</exception>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBusiness.ContactData">
            <summary>
            Gets or sets the contact data for the business.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBusiness.Location">
            <summary>
            Gets the location of the business.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBusiness.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBusiness.OpeningHours">
            <summary>
            Gets or sets the opening hours of the business.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBusiness.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBusiness.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphFitnessCourse">
            <summary>
            This object type represents the user's activity contributing to a particular run, walk, or bike course. This object type is not part of the 
            Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/fitness.course/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphFitnessCourse.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphFitnessCourse" /> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphFitnessCourse.Calories">
            <summary>
            Gets or sets an integer representing the number of calories used during the course.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphFitnessCourse.CustomUnitEnergy">
            <summary>
            Gets or sets the energy used during the course.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphFitnessCourse.Distance">
            <summary>
            Gets or sets the distance of the course.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphFitnessCourse.Duration">
            <summary>
            Gets or sets the duration taken on the course.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphFitnessCourse.LiveText">
            <summary>
            Gets or sets a string value displayed in stories if the associated action's end_time has not passed, such as an encouragement to friends to cheer the user on. The value is not rendered once the course has been completed.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphFitnessCourse.Metrics">
            <summary>
            Gets or sets the metrics about the course.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphFitnessCourse.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphFitnessCourse.Pace">
            <summary>
            Gets or sets the pace achieved on the course.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphFitnessCourse.Splits">
            <summary>
            Gets or sets the split times during the course.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphFitnessCourse.Speed">
            <summary>
            Gets or sets the speed achieved on the course.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphFitnessCourse.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphFitnessCourse.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphGameAchievement">
            <summary>
            This object type represents a specific achievement in a game. An app must be in the 'Games' category in App Dashboard to be able to use this 
            object type. Every achievement has a game:points value associate with it. This is not related to the points the user has scored in the game, but 
            is a way for the app to indicate the relative importance and scarcity of different achievements: * Each game gets a total of 1,000 points to 
            distribute across its achievements * Each game gets a maximum of 1,000 achievements * Achievements which are scarcer and have higher point 
            values will receive more distribution in Facebook's social channels. For example, achievements which have point values of less than 10 will get 
            almost no distribution. Apps should aim for between 50-100 achievements consisting of a mix of 50 (difficult), 25 (medium), and 10 (easy) point 
            value achievements Read more on how to use achievements in this guide. This object type is not part of the Open Graph standard but is used by 
            Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/game.achievement/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphGameAchievement.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphGameAchievement" /> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="points">The relative importance and scarcity of the achievement.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphGameAchievement.IsSecret">
            <summary>
            Gets or sets a value indicating whether this achievement is secret and should be hidden from display on Facebook.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphGameAchievement.Points">
            <summary>
            Gets the relative importance and scarcity of the achievement.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphGameAchievement.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphGameAchievement.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphGameAchievement.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphPlace">
            <summary>
            This object type represents a place - such as a venue, a business, a landmark, or any other location which can be identified by longitude and 
            latitude. This object type is not part of the Open Graph standard but is used by Facebook.
            See https://developers.facebook.com/docs/reference/opengraph/object-type/place/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphPlace.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,Boilerplate.Web.Mvc.OpenGraph.OpenGraphLocation,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphPlace" /> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="location">The location of the business.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
            <exception cref="T:System.ArgumentNullException">location is <c>null</c>.</exception>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphPlace.Location">
            <summary>
            Gets the location of the place.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphPlace.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphPlace.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphPlace.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphArticle">
            <summary>
            This object represents an article on a website. It is the preferred type for blog posts and news stories.
            This object type is part of the Open Graph standard.
            See http://ogp.me/
            See https://developers.facebook.com/docs/reference/opengraph/object-type/article/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphArticle.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphArticle"/> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphArticle.AuthorUrls">
            <summary>
            Gets or sets the URL's to the pages about the author who wrote the article. This URL must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphArticle.ExpirationTime">
            <summary>
            Gets or sets the expiration time, after which the article is out of date.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphArticle.ModifiedTime">
            <summary>
            Gets or sets the modified time, when the article was last changed.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphArticle.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphArticle.PublishedTime">
            <summary>
            Gets or sets the published time, when the article was published.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphArticle.PublisherUrl">
            <summary>
            Gets or sets the URL to the page about the publisher of the article. This URL must contain profile the meta tag <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile"/>.
            This particular property is not part of the Open Graph standard but is documented by Facebook.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphArticle.Section">
            <summary>
            Gets or sets the high-level section or category name e.g. Technology.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphArticle.Tags">
            <summary>
            Gets or sets the tag words associated with the article.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphArticle.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphArticle.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBook">
            <summary>
            This object represents a physical book or e-book. This object type is part of the Open Graph standard but
            Facebook uses the books.book object type instead which requires an ISBN number.
            See http://ogp.me/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBook.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBook"/> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBook.AuthorUrl">
            <summary>
            Gets or sets the URL to the page about the author who wrote the book. This URL must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBook.ISBN">
            <summary>
            Gets or sets the books unique ISBN number.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBook.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBook.ReleaseDate">
            <summary>
            Gets or sets the release date of the book.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBook.Tags">
            <summary>
            Gets or sets the tag words associated with the book.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBook.Type">
            <summary>
            Gets the type of your object, e.g. "video.movie". Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphBook.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicAlbum">
            <summary>
            This object represents a music album; in other words, an ordered collection of songs from an artist or a collection of artists. An album can 
            comprise multiple discs. This object type is part of the Open Graph standard.
            See http://ogp.me/
            See https://developers.facebook.com/docs/reference/opengraph/object-type/music.album/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicAlbum.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicAlbum"/> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="songUrls">The URL's to the pages about the songs on this album. This URL must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicSong"/>.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicAlbum.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicAlbum.MusicianUrls">
            <summary>
            Gets or sets the URL's to the pages about the musicians who wrote the song. This URL must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicAlbum.ReleaseDate">
            <summary>
            Gets or sets the release date of the album.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicAlbum.ReleaseType">
            <summary>
            Gets or sets the type of the release of the album. This is a Facebook specific property and not specified by the Open Graph standard.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicAlbum.SongDisc">
            <summary>
            Gets or sets which disc in the album the song is from.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicAlbum.SongTrack">
            <summary>
            Gets or sets which track in the album the song is from.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicAlbum.SongUrls">
            <summary>
            Gets the URL's to the pages about the songs on this album. This URL must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicSong"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicAlbum.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicAlbum.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicPlaylist">
            <summary>
            This object represents a music playlist, an ordered collection of songs from a collection of artists. This object type is part of the Open 
            Graph standard.
            See http://ogp.me/
            See https://developers.facebook.com/docs/reference/opengraph/object-type/music.playlist/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicPlaylist.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicPlaylist"/> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="songUrls">The URL's to the pages about the songs on this playlist. This URL must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicSong"/>.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicPlaylist.CreatorUrl">
            <summary>
            Gets or sets the URL to the page about the creator of the playlist. This URL must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicPlaylist.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicPlaylist.SongDisc">
            <summary>
            Gets or sets which disc in the album the song is from.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicPlaylist.SongTrack">
            <summary>
            Gets or sets which track in the album the song is from.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicPlaylist.SongUrls">
            <summary>
            Gets the URL's to the pages about the songs on this playlist. This URL must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicSong"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicPlaylist.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicPlaylist.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicRadioStation">
            <summary>
            This object represents a 'radio' station of a stream of audio. The audio properties should be used to identify the location of the stream itself. 
            This object type is part of the Open Graph standard.
            See http://ogp.me/
            See https://developers.facebook.com/docs/reference/opengraph/object-type/music.radio_station/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicRadioStation.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicRadioStation"/> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicRadioStation.CreatorUrl">
            <summary>
            Gets or sets the URL to the page about the creator of the radio station. This URL must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicRadioStation.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicRadioStation.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicRadioStation.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicSong">
            <summary>
            This object represents a single song. This object type is part of the Open Graph standard.
            See http://ogp.me/
            https://developers.facebook.com/docs/reference/opengraph/object-type/music.song/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicSong.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicSong"/> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="albumUrls">The URL's to the pages about the album the song comes from. This URL's must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicAlbum"/>.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicSong.AlbumDisc">
            <summary>
            Gets or sets which disc in the album the song is from.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicSong.AlbumTrack">
            <summary>
            Gets or sets which track in the album the song is from.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicSong.AlbumUrls">
            <summary>
            Gets the URL's to the pages about the album the song comes from. This URL's must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicAlbum"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicSong.Duration">
            <summary>
            Gets or sets the duration of the song in seconds.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicSong.ISRC">
            <summary>
            Gets or sets the International Standard Recording Code (ISRC) for the song. This is a Facebook specific property and is not specified in the 
            Open Graph standard.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicSong.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicSong.MusicianUrls">
            <summary>
            Gets or sets the URL's to the pages about the musicians who wrote the song. This URL's must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicSong.ReleaseDate">
            <summary>
            Gets or sets the release date of the song. This is a Facebook specific property and is not specified in the Open Graph standard.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicSong.ReleaseType">
            <summary>
            Gets or sets the type of the release of the song. This is a Facebook specific property and not specified by the Open Graph standard.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicSong.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMusicSong.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile">
            <summary>
            This object type represents a person. While appropriate for celebrities, artists, or musicians, this object type can be used for the profile of 
            any individual. This object type is part of the Open Graph standard.
            See http://ogp.me/
            See https://developers.facebook.com/docs/reference/opengraph/object-type/profile/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile"/> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile.FirstName">
            <summary>
            Gets or sets the name normally given to an individual by a parent or self-chosen.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile.Gender">
            <summary>
            Gets or sets the gender.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile.LastName">
            <summary>
            Gets or sets the name inherited from a family or marriage and by which the individual is commonly known.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile.Username">
            <summary>
            Gets or sets the short unique string to identify them.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoEpisode">
            <summary>
            This object type represents an episode of a TV show and contains references to the actors and other professionals involved in its production. 
            An episode is defined by us as a full-length episode that is part of a series. This type must reference the series this it is part of.
            This object type is part of the Open Graph standard.
            See http://ogp.me/
            See https://developers.facebook.com/docs/reference/opengraph/object-type/video.episode/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoEpisode.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoEpisode"/> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoEpisode.Actors">
            <summary>
            Gets or sets the actors in the episode.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoEpisode.DirectorUrls">
            <summary>
            Gets or sets the URL's to the pages about the directors. This URL's must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoEpisode.Duration">
            <summary>
            Gets or sets the duration of the episode in seconds.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoEpisode.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoEpisode.ReleaseDate">
            <summary>
            Gets or sets the release date of the episode.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoEpisode.SeriesUrl">
            <summary>
            Gets or sets the URL to the page about the television series. This URL's must contain television show meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoTvShow"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoEpisode.Tags">
            <summary>
            Gets or sets the tag words associated with the episode.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoEpisode.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoEpisode.WriterUrls">
            <summary>
            Gets or sets the URL's to the pages about the writers. This URL's must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile"/>.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoEpisode.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoMovie">
            <summary>
            This object type represents a movie, and contains references to the actors and other professionals involved in its production. A movie is 
            defined by us as a full-length feature or short film. Do not use this type to represent movie trailers, movie clips, user-generated video 
            content, etc. This object type is part of the Open Graph standard.
            See http://ogp.me/
            See https://developers.facebook.com/docs/reference/opengraph/object-type/video.movie/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoMovie.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoMovie"/> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoMovie.Actors">
            <summary>
            Gets or sets the actors in the movie.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoMovie.DirectorUrls">
            <summary>
            Gets or sets the URL's to the pages about the directors. This URL's must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoMovie.Duration">
            <summary>
            Gets or sets the duration of the movie in seconds.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoMovie.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoMovie.ReleaseDate">
            <summary>
            Gets or sets the release date of the movie.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoMovie.Tags">
            <summary>
            Gets or sets the tag words associated with the movie.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoMovie.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoMovie.WriterUrls">
            <summary>
            Gets or sets the URL's to the pages about the writers. This URL's must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile"/>.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoMovie.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoOther">
            <summary>
            This object type represents a generic video, and contains references to the actors and other professionals involved in its production. For 
            specific types of video content, use the video.movie or video.tv_show object types. This type is for any other type of video content not 
            represented elsewhere (eg. trailers, music videos, clips, news segments etc.). This object type is part of the Open Graph standard.
            See http://ogp.me/
            See https://developers.facebook.com/docs/reference/opengraph/object-type/video.other/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoOther.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoOther"/> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoOther.Actors">
            <summary>
            Gets or sets the actors in the video.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoOther.DirectorUrls">
            <summary>
            Gets or sets the URL's to the pages about the directors. This URL's must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoOther.Duration">
            <summary>
            Gets or sets the duration of the video in seconds.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoOther.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoOther.ReleaseDate">
            <summary>
            Gets or sets the release date of the video.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoOther.Tags">
            <summary>
            Gets or sets the tag words associated with the video.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoOther.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoOther.WriterUrls">
            <summary>
            Gets or sets the URL's to the pages about the writers. This URL's must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile"/>.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoOther.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoTvShow">
            <summary>
            This object type represents a TV show, and contains references to the actors and other professionals involved in its production. For individual 
            episodes of a series, use the video.episode object type. A TV show is defined by us as a series or set of episodes that are produced under the 
            same title (eg. a television or online series). This object type is part of the Open Graph standard.
            See http://ogp.me/
            See https://developers.facebook.com/docs/reference/opengraph/object-type/video.tv_show/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoTvShow.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoTvShow"/> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoTvShow.Actors">
            <summary>
            Gets or sets the actors in the television show.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoTvShow.DirectorUrls">
            <summary>
            Gets or sets the URL's to the pages about the directors. This URL's must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoTvShow.Duration">
            <summary>
            Gets or sets the duration of the television show in seconds.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoTvShow.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoTvShow.ReleaseDate">
            <summary>
            Gets or sets the release date of the television show.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoTvShow.Tags">
            <summary>
            Gets or sets the tag words associated with the television show.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoTvShow.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoTvShow.WriterUrls">
            <summary>
            Gets or sets the URL's to the pages about the writers. This URL's must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile"/>.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphVideoTvShow.ToString(System.Text.StringBuilder)">
            <summary>
            Appends a HTML-encoded string representing this instance to the <paramref name="stringBuilder"/> containing the Open Graph meta tags.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphWebsite">
            <summary>
            An object representing a website. This object type is part of the Open Graph standard.
            See http://ogp.me/
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphWebsite.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphImage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphWebsite"/> class.
            </summary>
            <param name="title">The title of the object as it should appear in the graph.</param>
            <param name="image">The default image.</param>
            <param name="url">The canonical URL of the object, used as its ID in the graph.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphWebsite.Namespace">
            <summary>
            Gets the namespace of this open graph type.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphWebsite.Type">
            <summary>
            Gets the type of your object. Depending on the type you specify, other properties may also be required.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphCurrency">
            <summary>
            Represents a currency type and amount.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphCurrency.#ctor(System.Double,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphCurrency"/> class.
            </summary>
            <param name="amount">The actual currency amount.</param>
            <param name="currency">The currency type.</param>
            <exception cref="T:System.ArgumentNullException">currency is <c>null</c>.</exception>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphCurrency.Amount">
            <summary>
            Gets the actual currency amount.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphCurrency.Currency">
            <summary>
            Gets the currency type.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphDateTimeRange">
            <summary>
            A date and time range.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphDateTimeRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphDateTimeRange"/> class.
            </summary>
            <param name="start">The start date and time.</param>
            <param name="end">The end date and time.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphDateTimeRange.End">
            <summary>
            Gets the end date and time.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphDateTimeRange.Start">
            <summary>
            Gets the start date and time.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphFitnessActivityDataPoint">
            <summary>
            A single data point in a fitness activity.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphFitnessActivityDataPoint.Calories">
            <summary>
            Gets or sets an integer representing the number of calories used during a distinct part of the course.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphFitnessActivityDataPoint.CustomUnitEnergy">
            <summary>
            Gets or sets the energy used during a distinct part of the course.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphFitnessActivityDataPoint.Distance">
            <summary>
            Gets or sets the distance covered during a distinct part of the course.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphFitnessActivityDataPoint.Location">
            <summary>
            Gets or sets the location of a distinct part of the course.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphFitnessActivityDataPoint.Pace">
            <summary>
            Gets or sets the pace achieved during distinct parts of the course.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphFitnessActivityDataPoint.Speed">
            <summary>
            Gets or sets the speed achieved during a distinct part of the course.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphFitnessActivityDataPoint.Steps">
            <summary>
            Gets or sets the number of steps taken during a distinct part of the course.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphFitnessActivityDataPoint.Timestamp">
            <summary>
            Gets or sets the time of a distinct parts of the course.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMenuItemVariation">
            <summary>
            Represents the name and price of a menu item variation.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMenuItemVariation.#ctor(System.String,Boilerplate.Web.Mvc.OpenGraph.OpenGraphCurrency)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMenuItemVariation"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="price">The price.</param>
            <exception cref="T:System.ArgumentNullException">name or price is <c>null</c>.</exception>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMenuItemVariation.Name">
            <summary>
            Gets the name of the menu item variation.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphMenuItemVariation.Price">
            <summary>
            Gets the price of the menu item variation.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphQuantity">
            <summary>
            A quantity of units.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphQuantity.#ctor(System.Double,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphQuantity"/> class.
            </summary>
            <param name="value">The quantity value.</param>
            <param name="units">The type of units. Allowed values are Ym, Zm, Em, Pm, Tm, Gm, Mm, km, hm, dam, m, dm, cm, mm, μm, nm, pm, fm, am, zm, ym, Yg, Zg, Eg, Pg, Tg, Gg, Mg, kg, hg, dag, g, dg, cg, mg, μg, ng, pg, fg, ag, zg, yg, Ys, Zs, Es, Ps, Ts, Gs, Ms, ks, hs, das, s, ds, cs, ms, μs, ns, ps, fs, as, zs, ys, YA, ZA, EA, PA, TA, GA, MA, kA, hA, daA, A, dA, cA, mA, μA, nA, pA, fA, aA, zA, yA, YK, ZK, EK, PK, TK, GK, MK, kK, hK, daK, K, dK, cK, mK, μK, nK, pK, fK, aK, zK, yK, Ymol, Zmol, Emol, Pmol, Tmol, Gmol, Mmol, kmol, hmol, damol, mol, dmol, cmol, mmol, μmol, nmol, pmol, fmol, amol, zmol, ymol, Ycd, Zcd, Ecd, Pcd, Tcd, Gcd, Mcd, kcd, hcd, dacd, cd, dcd, ccd, mcd, μcd, ncd, pcd, fcd, acd, zcd, ycd, YJ, ZJ, EJ, PJ, TJ, GJ, MJ, kJ, hJ, daJ, J, dJ, cJ, mJ, μJ, nJ, pJ, fJ, aJ, zJ, yJ, Ym/s, s/Ym, Zm/s, s/Zm, Em/s, s/Em, Pm/s, s/Pm, Tm/s, s/Tm, Gm/s, s/Gm, Mm/s, s/Mm, km/s, s/km, hm/s, s/hm, dam/s, s/dam, m/s, s/m, dm/s, s/dm, cm/s, s/cm, mm/s, s/mm, μm/s, s/μm, nm/s, s/nm, pm/s, s/pm, fm/s, s/fm, am/s, s/am, zm/s, s/zm, ym/s, s/ym, Yg/s, s/Yg, Zg/s, s/Zg, Eg/s, s/Eg, Pg/s, s/Pg, Tg/s, s/Tg, Gg/s, s/Gg, Mg/s, s/Mg, kg/s, s/kg, hg/s, s/hg, dag/s, s/dag, g/s, s/g, dg/s, s/dg, cg/s, s/cg, mg/s, s/mg, μg/s, s/μg, ng/s, s/ng, pg/s, s/pg, fg/s, s/fg, ag/s, s/ag, zg/s, s/zg, yg/s, s/yg, Ys/s, s/Ys, Zs/s, s/Zs, Es/s, s/Es, Ps/s, s/Ps, Ts/s, s/Ts, Gs/s, s/Gs, Ms/s, s/Ms, ks/s, s/ks, hs/s, s/hs, das/s, s/das, s/s, s/s, ds/s, s/ds, cs/s, s/cs, ms/s, s/ms, μs/s, s/μs, ns/s, s/ns, ps/s, s/ps, fs/s, s/fs, as/s, s/as, zs/s, s/zs, ys/s, s/ys, YA/s, s/YA, ZA/s, s/ZA, EA/s, s/EA, PA/s, s/PA, TA/s, s/TA, GA/s, s/GA, MA/s, s/MA, kA/s, s/kA, hA/s, s/hA, daA/s, s/daA, A/s, s/A, dA/s, s/dA, cA/s, s/cA, mA/s, s/mA, μA/s, s/μA, nA/s, s/nA, pA/s, s/pA, fA/s, s/fA, aA/s, s/aA, zA/s, s/zA, yA/s, s/yA, YK/s, s/YK, ZK/s, s/ZK, EK/s, s/EK, PK/s, s/PK, TK/s, s/TK, GK/s, s/GK, MK/s, s/MK, kK/s, s/kK, hK/s, s/hK, daK/s, s/daK, K/s, s/K, dK/s, s/dK, cK/s, s/cK, mK/s, s/mK, μK/s, s/μK, nK/s, s/nK, pK/s, s/pK, fK/s, s/fK, aK/s, s/aK, zK/s, s/zK, yK/s, s/yK, Ymol/s, s/Ymol, Zmol/s, s/Zmol, Emol/s, s/Emol, Pmol/s, s/Pmol, Tmol/s, s/Tmol, Gmol/s, s/Gmol, Mmol/s, s/Mmol, kmol/s, s/kmol, hmol/s, s/hmol, damol/s, s/damol, mol/s, s/mol, dmol/s, s/dmol, cmol/s, s/cmol, mmol/s, s/mmol, μmol/s, s/μmol, nmol/s, s/nmol, pmol/s, s/pmol, fmol/s, s/fmol, amol/s, s/amol, zmol/s, s/zmol, ymol/s, s/ymol, Ycd/s, s/Ycd, Zcd/s, s/Zcd, Ecd/s, s/Ecd, Pcd/s, s/Pcd, Tcd/s, s/Tcd, Gcd/s, s/Gcd, Mcd/s, s/Mcd, kcd/s, s/kcd, hcd/s, s/hcd, dacd/s, s/dacd, cd/s, s/cd, dcd/s, s/dcd, ccd/s, s/ccd, mcd/s, s/mcd, μcd/s, s/μcd, ncd/s, s/ncd, pcd/s, s/pcd, fcd/s, s/fcd, acd/s, s/acd, zcd/s, s/zcd, ycd/s, s/ycd, YJ/s, s/YJ, ZJ/s, s/ZJ, EJ/s, s/EJ, PJ/s, s/PJ, TJ/s, s/TJ, GJ/s, s/GJ, MJ/s, s/MJ, kJ/s, s/kJ, hJ/s, s/hJ, daJ/s, s/daJ, J/s, s/J, dJ/s, s/dJ, cJ/s, s/cJ, mJ/s, s/mJ, μJ/s, s/μJ, nJ/s, s/nJ, pJ/s, s/pJ, fJ/s, s/fJ, aJ/s, s/aJ, zJ/s, s/zJ, yJ/s, s/yJ, mi/s, s/mi, ft/s, s/ft, in/s, s/in, ton/s, s/ton, lb/s, s/lb, oz/s, s/oz, mi, ft, in, ton, lb, oz and %.</param>
            <exception cref="T:System.ArgumentNullException">units</exception>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphQuantity.Units">
            <summary>
            Gets the type of units. Allowed values are Ym, Zm, Em, Pm, Tm, Gm, Mm, km, hm, dam, m, dm, cm, mm, μm, nm, pm, fm, am, zm, ym, Yg, Zg, Eg, Pg, Tg, Gg, Mg, kg, hg, dag, g, dg, cg, mg, μg, ng, pg, fg, ag, zg, yg, Ys, Zs, Es, Ps, Ts, Gs, Ms, ks, hs, das, s, ds, cs, ms, μs, ns, ps, fs, as, zs, ys, YA, ZA, EA, PA, TA, GA, MA, kA, hA, daA, A, dA, cA, mA, μA, nA, pA, fA, aA, zA, yA, YK, ZK, EK, PK, TK, GK, MK, kK, hK, daK, K, dK, cK, mK, μK, nK, pK, fK, aK, zK, yK, Ymol, Zmol, Emol, Pmol, Tmol, Gmol, Mmol, kmol, hmol, damol, mol, dmol, cmol, mmol, μmol, nmol, pmol, fmol, amol, zmol, ymol, Ycd, Zcd, Ecd, Pcd, Tcd, Gcd, Mcd, kcd, hcd, dacd, cd, dcd, ccd, mcd, μcd, ncd, pcd, fcd, acd, zcd, ycd, YJ, ZJ, EJ, PJ, TJ, GJ, MJ, kJ, hJ, daJ, J, dJ, cJ, mJ, μJ, nJ, pJ, fJ, aJ, zJ, yJ, Ym/s, s/Ym, Zm/s, s/Zm, Em/s, s/Em, Pm/s, s/Pm, Tm/s, s/Tm, Gm/s, s/Gm, Mm/s, s/Mm, km/s, s/km, hm/s, s/hm, dam/s, s/dam, m/s, s/m, dm/s, s/dm, cm/s, s/cm, mm/s, s/mm, μm/s, s/μm, nm/s, s/nm, pm/s, s/pm, fm/s, s/fm, am/s, s/am, zm/s, s/zm, ym/s, s/ym, Yg/s, s/Yg, Zg/s, s/Zg, Eg/s, s/Eg, Pg/s, s/Pg, Tg/s, s/Tg, Gg/s, s/Gg, Mg/s, s/Mg, kg/s, s/kg, hg/s, s/hg, dag/s, s/dag, g/s, s/g, dg/s, s/dg, cg/s, s/cg, mg/s, s/mg, μg/s, s/μg, ng/s, s/ng, pg/s, s/pg, fg/s, s/fg, ag/s, s/ag, zg/s, s/zg, yg/s, s/yg, Ys/s, s/Ys, Zs/s, s/Zs, Es/s, s/Es, Ps/s, s/Ps, Ts/s, s/Ts, Gs/s, s/Gs, Ms/s, s/Ms, ks/s, s/ks, hs/s, s/hs, das/s, s/das, s/s, s/s, ds/s, s/ds, cs/s, s/cs, ms/s, s/ms, μs/s, s/μs, ns/s, s/ns, ps/s, s/ps, fs/s, s/fs, as/s, s/as, zs/s, s/zs, ys/s, s/ys, YA/s, s/YA, ZA/s, s/ZA, EA/s, s/EA, PA/s, s/PA, TA/s, s/TA, GA/s, s/GA, MA/s, s/MA, kA/s, s/kA, hA/s, s/hA, daA/s, s/daA, A/s, s/A, dA/s, s/dA, cA/s, s/cA, mA/s, s/mA, μA/s, s/μA, nA/s, s/nA, pA/s, s/pA, fA/s, s/fA, aA/s, s/aA, zA/s, s/zA, yA/s, s/yA, YK/s, s/YK, ZK/s, s/ZK, EK/s, s/EK, PK/s, s/PK, TK/s, s/TK, GK/s, s/GK, MK/s, s/MK, kK/s, s/kK, hK/s, s/hK, daK/s, s/daK, K/s, s/K, dK/s, s/dK, cK/s, s/cK, mK/s, s/mK, μK/s, s/μK, nK/s, s/nK, pK/s, s/pK, fK/s, s/fK, aK/s, s/aK, zK/s, s/zK, yK/s, s/yK, Ymol/s, s/Ymol, Zmol/s, s/Zmol, Emol/s, s/Emol, Pmol/s, s/Pmol, Tmol/s, s/Tmol, Gmol/s, s/Gmol, Mmol/s, s/Mmol, kmol/s, s/kmol, hmol/s, s/hmol, damol/s, s/damol, mol/s, s/mol, dmol/s, s/dmol, cmol/s, s/cmol, mmol/s, s/mmol, μmol/s, s/μmol, nmol/s, s/nmol, pmol/s, s/pmol, fmol/s, s/fmol, amol/s, s/amol, zmol/s, s/zmol, ymol/s, s/ymol, Ycd/s, s/Ycd, Zcd/s, s/Zcd, Ecd/s, s/Ecd, Pcd/s, s/Pcd, Tcd/s, s/Tcd, Gcd/s, s/Gcd, Mcd/s, s/Mcd, kcd/s, s/kcd, hcd/s, s/hcd, dacd/s, s/dacd, cd/s, s/cd, dcd/s, s/dcd, ccd/s, s/ccd, mcd/s, s/mcd, μcd/s, s/μcd, ncd/s, s/ncd, pcd/s, s/pcd, fcd/s, s/fcd, acd/s, s/acd, zcd/s, s/zcd, ycd/s, s/ycd, YJ/s, s/YJ, ZJ/s, s/ZJ, EJ/s, s/EJ, PJ/s, s/PJ, TJ/s, s/TJ, GJ/s, s/GJ, MJ/s, s/MJ, kJ/s, s/kJ, hJ/s, s/hJ, daJ/s, s/daJ, J/s, s/J, dJ/s, s/dJ, cJ/s, s/cJ, mJ/s, s/mJ, μJ/s, s/μJ, nJ/s, s/nJ, pJ/s, s/pJ, fJ/s, s/fJ, aJ/s, s/aJ, zJ/s, s/zJ, yJ/s, s/yJ, mi/s, s/mi, ft/s, s/ft, in/s, s/in, ton/s, s/ton, lb/s, s/lb, oz/s, s/oz, mi, ft, in, ton, lb, oz and %.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphQuantity.Value">
            <summary>
            Gets the quantity value.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphSplit">
            <summary>
            A split value in a fitness event.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphSplit.#ctor(System.Boolean,System.Collections.Generic.IEnumerable{Boilerplate.Web.Mvc.OpenGraph.OpenGraphQuantity})">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphSplit"/> class.
            </summary>
            <param name="isMiles">if set to <c>true</c> distance is measured in miles, otherwise kilometres.</param>
            <param name="values">The values.</param>
            <exception cref="T:System.ArgumentNullException">values</exception>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphSplit.IsMiles">
            <summary>
            Gets a value indicating whether distance is measured in miles.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphSplit.IsKilometers">
            <summary>
            Gets a value indicating whether distance is measured in kilometres.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphSplit.Values">
            <summary>
            Gets the split values.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphActor">
            <summary>
            Represents an actor in a video.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphActor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphActor"/> class.
            </summary>
            <param name="actorUrl">The URL to the page about the actor. This URL must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="actorUrl"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphActor.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphActor"/> class.
            </summary>
            <param name="actorUrl">The URL to the page about the actor. This URL must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile"/>.</param>
            <param name="role">The role the actor played.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="actorUrl"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphActor.ActorUrl">
            <summary>
            Gets the URL to the page about the actor. This URL must contain profile meta tags <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphProfile"/>.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphActor.Role">
            <summary>
            Gets or sets the role the actor played.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphContactData">
            <summary>
            A set of contact information, including address, phone, email, fax and website.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphContactData.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphContactData" /> class.
            </summary>
            <param name="streetAddress">The number and street of the postal address for this business.</param>
            <param name="locality">The city (or locality) line of the postal address for this business.</param>
            <param name="postalCode">The postcode (or ZIP code) of the postal address for this business</param>
            <param name="country">The country of the postal address for this business.</param>
            <exception cref="T:System.ArgumentNullException">streetAddress or locality or postalCode or country is <c>null.</c>.</exception>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphContactData.Country">
            <summary>
            Gets the country of the postal address for this business.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphContactData.Email">
            <summary>
            Gets or sets the email address to contact this business.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphContactData.Fax">
            <summary>
            Gets or sets a fax number to contact this business.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphContactData.Locality">
            <summary>
            Gets the city (or locality) line of the postal address for this business.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphContactData.Phone">
            <summary>
            Gets or sets a telephone number to contact this business.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphContactData.PostalCode">
            <summary>
            Gets the postcode (or ZIP code) of the postal address for this business.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphContactData.Region">
            <summary>
            Gets or sets the state (or region) line of the postal address for this business.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphContactData.StreetAddress">
            <summary>
            Gets the number and street of the postal address for this business.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphContactData.Website">
            <summary>
            Gets or sets a website for this business.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphHours">
            <summary>
            A period of time on the specified day.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphHours.#ctor(System.DayOfWeek,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphHours"/> class.
            </summary>
            <param name="day">The day in the week.</param>
            <param name="start">The start time of the day. This can be a value from 00:00 to 24:00 hours.</param>
            <param name="end">The end time of the day. This can be a value from 00:00 to 24:00 hours.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphHours.Day">
            <summary>
            Gets the day in the week.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphHours.End">
            <summary>
            Gets the end time of the day. This can be a value from 00:00 to 24:00 hours.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphHours.Start">
            <summary>
            Gets the start time of the day. This can be a value from 00:00 to 24:00 hours.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphLocation">
            <summary>
            A location specified by latitude and longitude.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphLocation.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphLocation"/> class.
            </summary>
            <param name="latitude">The latitude of the location.</param>
            <param name="longitude">The longitude of the location.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphLocation.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphLocation"/> class.
            </summary>
            <param name="latitude">The latitude of the location.</param>
            <param name="longitude">The longitude of the location.</param>
            <param name="altitude">The altitude of the location.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphLocation.Altitude">
            <summary>
            Gets the altitude of the location.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphLocation.Latitude">
            <summary>
            Gets the latitude of the location.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphLocation.Longitude">
            <summary>
            Gets the longitude of the location.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRating">
            <summary>
            Represents the rating on some scale for an object.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRating.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRating"/> class.
            </summary>
            <param name="value">The value of the rating given to the object.</param>
            <param name="scale">The highest value possible in the rating scale.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRating.Scale">
            <summary>
            Gets the highest value possible in the rating scale.
            </summary>
        </member>
        <member name="P:Boilerplate.Web.Mvc.OpenGraph.OpenGraphRating.Value">
            <summary>
            Gets the value of the rating given to the object.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Sitemap.SitemapException">
            <summary>
            Represents errors that occur during sitemap creation.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Sitemap.SitemapException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.Sitemap.SitemapException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Sitemap.SitemapException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.Sitemap.SitemapException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Sitemap.SitemapException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.Sitemap.SitemapException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the 
            serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains 
            contextual information about the source or destination.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Sitemap.SitemapGenerator">
            <summary>
            Generates sitemap XML.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Sitemap.SitemapGenerator.MaximumSitemapCount">
            <summary>
            The maximum number of sitemaps a sitemap index file can contain.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Sitemap.SitemapGenerator.MaximumSitemapNodeCount">
            <summary>
            The maximum number of sitemap nodes allowed in a sitemap file. The absolute maximum allowed is 50,000
            according to the specification. See http://www.sitemaps.org/protocol.html but the file size must also be
            less than 10MB. After some experimentation, a maximum of 25,000 nodes keeps the file size below 10MB.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Sitemap.SitemapGenerator.MaximumSitemapSizeInBytes">
            <summary>
            The maximum size of a sitemap file in bytes (10MB).
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Sitemap.SitemapGenerator.GetSitemapDocuments(System.Collections.Generic.IReadOnlyCollection{Boilerplate.Web.Mvc.Sitemap.SitemapNode})">
            <summary>
            Gets the collection of XML sitemap documents for the current site. If there are less than 25,000 sitemap
            nodes, only one sitemap document will exist in the collection, otherwise a sitemap index document will be
            the first entry in the collection and all other entries will be sitemap XML documents.
            </summary>
            <param name="sitemapNodes">The sitemap nodes for the current site.</param>
            <returns>A collection of XML sitemap documents.</returns>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Sitemap.SitemapGenerator.GetSitemapUrl(System.Int32)">
            <summary>
            Gets the URL to the sitemap with the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Sitemap.SitemapGenerator.LogWarning(System.Exception)">
            <summary>
            Logs warnings when a sitemap exceeds the maximum size of 10MB or if the sitemap index file exceeds the
            maximum number of allowed sitemaps. No exceptions are thrown in this case as the sitemap file is still
            generated correctly and search engines may still read it.
            </summary>
            <param name="exception">The exception to log.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Sitemap.SitemapGenerator.GetSitemapIndexDocument(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int32,System.Collections.Generic.IEnumerable{Boilerplate.Web.Mvc.Sitemap.SitemapNode}}})">
            <summary>
            Gets the sitemap index XML document, containing links to all the sitemap XML documents.
            </summary>
            <param name="sitemaps">The collection of sitemaps containing their index and nodes.</param>
            <returns>The sitemap index XML document, containing links to all the sitemap XML documents.</returns>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Sitemap.SitemapGenerator.GetSitemapDocument(System.Collections.Generic.IEnumerable{Boilerplate.Web.Mvc.Sitemap.SitemapNode})">
            <summary>
            Gets the sitemap XML document for the specified set of nodes.
            </summary>
            <param name="sitemapNodes">The sitemap nodes.</param>
            <returns>The sitemap XML document for the specified set of nodes.</returns>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Sitemap.SitemapGenerator.CheckDocumentSize(System.String)">
            <summary>
            Checks the size of the XML sitemap document. If it is over 10MB, logs an error.
            </summary>
            <param name="sitemapXml">The sitemap XML document.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Sitemap.SitemapGenerator.CheckSitemapCount(System.Int32)">
            <summary>
            Checks the count of the number of sitemaps. If it is over 50,000, logs an error.
            </summary>
            <param name="sitemapCount">The sitemap count.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Sitemap.SitemapFrequency">
            <summary>
            How frequently the page or URL is likely to change.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Sitemap.SitemapFrequency.Never">
            <summary>
            Describes archived URLs that never change.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Sitemap.SitemapFrequency.Yearly">
            <summary>
            Describes URL's that change yearly.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Sitemap.SitemapFrequency.Monthly">
            <summary>
            Describes URL's that change monthly.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Sitemap.SitemapFrequency.Weekly">
            <summary>
            Describes URL's that change weekly.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Sitemap.SitemapFrequency.Daily">
            <summary>
            Describes URL's that change daily.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Sitemap.SitemapFrequency.Hourly">
            <summary>
            Describes URL's that change hourly.
            </summary>
        </member>
        <member name="F:Boilerplate.Web.Mvc.Sitemap.SitemapFrequency.Always">
            <summary>
            Describes documents that change each time they are accessed.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.Sitemap.SitemapNode">
            <summary>
            Represents a page or URL in your sitemap.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.Sitemap.SitemapNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.Sitemap.SitemapNode"/> class.
            </summary>
            <param name="url">The URL of the page.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Sitemap.SitemapNode.Frequency">
            <summary>
            Gets or sets how frequently the page is likely to change. This value provides general information to search 
            engines and may not correlate exactly to how often they crawl the page.
            Please note that this value is considered a hint and not a command. Even though search engine 
            crawlers may consider this information when making decisions, they may crawl pages marked "hourly" less 
            frequently than that, and they may crawl pages marked "yearly" more frequently than that. Crawlers may 
            periodically crawl pages marked "never" so that they can handle unexpected changes to those pages.
            </summary>
            <value>
            The frequency the page is likely to change.
            </value>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Sitemap.SitemapNode.LastModified">
            <summary>
            Gets or sets the date of last modification of the file. This is an optional field.
            You may omit the time portion if desired.
            Note that this is separate from the If-Modified-Since (304) HTTP header the server can return, 
            and search engines may use the information from both sources differently.
            </summary>
            <value>
            The date of last modification of the file.
            </value>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Sitemap.SitemapNode.Priority">
            <summary>
            Gets or sets the priority of this URL relative to other URLs on your site. Valid values range from 0.0 to 1.0. 
            This field is optional, if it is <c>null</c> the default priority of a page is 0.5. This value does not 
            affect how your pages are compared to pages on other sites, it only lets the search engines know which 
            pages you deem most important for the crawlers. 
            Please note that the priority you assign to a page is not likely to influence the position of your URLs in 
            a search engine's result pages. Search engines may use this information when selecting between URLs on the 
            same site, so you can use this tag to increase the likelihood that your most important pages are present 
            in a search index.
            Also, please note that assigning a high priority to all of the URLs on your site is not likely to help you. 
            Since the priority is relative, it is only used to select between URLs on your site.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="P:Boilerplate.Web.Mvc.Sitemap.SitemapNode.Url">
            <summary>
            Gets or sets the URL of the page. This URL must begin with the protocol (such as http) and end with a 
            trailing slash, if your web server requires it. This value must be less than 2,048 characters.
            </summary>
            <value>
            The URL of the page.
            </value>
        </member>
        <member name="T:Boilerplate.Web.Mvc.StringBuilderExtensions">
            <summary>
            <see cref="T:System.Text.StringBuilder"/> extension methods.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.StringBuilderExtensions.AppendMetaNameContent``1(System.Text.StringBuilder,System.String,``0)">
            <summary>
            Appends a <see cref="T:System.String"/> representing a meta tag with the specified name and content attribute value.
            </summary>
            <typeparam name="T">The type of the content.</typeparam>
            <param name="stringBuilder">The string builder.</param>
            <param name="name">The name value of the meta tag.</param>
            <param name="content">The content value of the meta tag.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.StringBuilderExtensions.AppendMetaNameContentIfNotNull``1(System.Text.StringBuilder,System.String,``0)">
            <summary>
            Appends a <see cref="T:System.String"/> representing a meta tag with the specified name and content attribute value, 
            only if the <paramref name="content"/> is not <c>null</c>.
            </summary>
            <typeparam name="T">The type of the content.</typeparam>
            <param name="stringBuilder">The string builder.</param>
            <param name="name">The name value of the meta tag.</param>
            <param name="content">The content value of the meta tag.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.StringBuilderExtensions.AppendMetaPropertyContent``1(System.Text.StringBuilder,System.String,``0)">
            <summary>
            Appends a <see cref="T:System.String"/> representing a meta tag with the specified property and content attribute value.
            </summary>
            <typeparam name="T">The type of the content.</typeparam>
            <param name="stringBuilder">The string builder.</param>
            <param name="property">The property name of the meta tag.</param>
            <param name="content">The content value of the meta tag.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.StringBuilderExtensions.AppendMetaPropertyContent(System.Text.StringBuilder,System.String,System.DateTime)">
            <summary>
            Appends a <see cref="T:System.String" /> representing a meta tag with the specified property and 
            <see cref="T:System.DateTime"/> content value. The content is in the format yyyy-MM-dd if no time component is 
            specified, otherwise yyyy-MM-ddTHH:mm:ssZ.
            </summary>
            <param name="stringBuilder">The string builder.</param>
            <param name="property">The property name of the meta tag.</param>
            <param name="content">The content value of the meta tag.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.StringBuilderExtensions.AppendMetaPropertyContent``1(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Appends a <see cref="T:System.String" /> representing multiple meta tags with the specified property and content values.
            </summary>
            <typeparam name="T">The type of the content.</typeparam>
            <param name="stringBuilder">The string builder.</param>
            <param name="property">The property name of the meta tag.</param>
            <param name="content">The collection of content values of the meta tag.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.StringBuilderExtensions.AppendMetaPropertyContentIfNotNull``1(System.Text.StringBuilder,System.String,``0)">
            <summary>
            Appends a <see cref="T:System.String"/> representing a meta tag with the specified property and content attribute 
            value, only if the <paramref name="content"/> is not <c>null</c>.
            </summary>
            <typeparam name="T">The type of the content.</typeparam>
            <param name="stringBuilder">The string builder.</param>
            <param name="property">The property name of the meta tag.</param>
            <param name="content">The content value of the meta tag.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.StringBuilderExtensions.AppendMetaPropertyContentIfNotNull(System.Text.StringBuilder,System.String,System.Nullable{System.DateTime})">
            <summary>
            Appends a <see cref="T:System.String" /> representing a meta tag with the specified property and 
            <see cref="T:System.DateTime"/> content value, only if the <paramref name="content"/> is not <c>null</c>. The 
            content is in the format yyyy-MM-dd if no time component is specified, otherwise yyyy-MM-ddTHH:mm:ssZ.
            </summary>
            <param name="stringBuilder">The string builder.</param>
            <param name="property">The property name of the meta tag.</param>
            <param name="content">The content value of the meta tag.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.StringBuilderExtensions.AppendMetaPropertyContentIfNotNull``1(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Appends a <see cref="T:System.String" /> representing multiple meta tags with the specified property and content 
            values, only if the <paramref name="content"/> is not <c>null</c>.
            </summary>
            <typeparam name="T">The type of the content.</typeparam>
            <param name="stringBuilder">The string builder.</param>
            <param name="property">The property name of the meta tag.</param>
            <param name="content">The collection of content values of the meta tag.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.FriendlyUrlHelper">
            <summary>
            Helps convert <see cref="T:System.String"/> title text to URL friendly <see cref="T:System.String"/>'s that can safely be 
            displayed in a URL.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.FriendlyUrlHelper.GetFriendlyTitle(System.String,System.Boolean,System.Int32)">
            <summary>
            Converts the specified title so that it is more human and search engine readable e.g. 
            http://example.com/product/123/this-is-the-seo-and-human-friendly-product-title. Note that the ID of the 
            product is still included in the URL, to avoid having to deal with two titles with the same name. Search 
            Engine Optimization (SEO) friendly URL's gives your site a boost in search rankings by including keywords 
            in your URL's. They are also easier to read by users and can give them an indication of what they are 
            clicking on when they look at a URL. Refer to the code example below to see how this helper can be used. 
            Go to definition on this method to see a code example. To learn more about friendly URL's see 
            http://moz.com/blog/11-best-practices-for-urls.
            To learn more about how this was implemented see 
            http://stackoverflow.com/questions/25259/how-does-stack-overflow-generate-its-seo-friendly-urls/25486#25486
            </summary>
            <param name="title">The title of the URL.</param>
            <param name="remapToAscii">if set to <c>true</c>, remaps special UTF8 characters like 'è' to their ASCII 
            equivalent 'e'. All modern browsers except Internet Explorer display the 'è' correctly. Older browsers and 
            Internet Explorer percent encode these international characters so they are displayed as'%C3%A8'. What you 
            set this to depends on whether your target users are English speakers or not.</param>
            <param name="maxlength">The maximum allowed length of the title.</param>
            <returns>The SEO and human friendly title.</returns>
            <code>
            [Route("details/{id}/{title}", Name = "GetDetails")]
            public ActionResult Details(int id, string title)
            {
                // Get the product as indicated by the ID from a database or some repository.
                Product product = ProductRepository.Fetch(id);
                
                // If a product with the specified ID was not found, return a 404 Not Found response.
                if (product == null)
                {
                    return this.HttpNotFound();
                }
            
                // Get the actual friendly version of the title.
                string friendlyTitle = FriendlyUrlHelper.GetFriendlyTitle(product.Title);
                
                // Compare the title with the friendly title.
                if (!string.Equals(friendlyTitle, title, StringComparison.Ordinal))
                {
                    // If the title is null, empty or does not match the friendly title, return a 301 Permanent 
                    // Redirect to the correct friendly URL.
                    return new RedirectResult(this.Url.RouteUrl("GetDetails", new { id = id, title = friendlyTitle }), true);
                }
                
                // The URL the client has browsed to is correct, show them the view containing the product.
                return View(product);
            }
            </code>
        </member>
        <member name="M:Boilerplate.Web.Mvc.FriendlyUrlHelper.RemapInternationalCharToAscii(System.Char)">
            <summary>
            Remaps the international character to their equivalent ASCII characters. See 
            http://meta.stackexchange.com/questions/7435/non-us-ascii-characters-dropped-from-full-profile-url/7696#7696
            </summary>
            <param name="character">The character to remap to its ASCII equivalent.</param>
            <returns>The remapped character</returns>
        </member>
        <member name="T:Boilerplate.Web.Mvc.StringWriterWithEncoding">
            <summary>
            The <see cref="T:System.IO.StringWriter" /> class always outputs UTF-16 encoded strings. To use a different encoding, we 
            must inherit from <see cref="T:System.IO.StringWriter" />. See 
            http://stackoverflow.com/questions/9459184/why-is-the-xmlwriter-always-outputing-utf-16-encoding.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.StringWriterWithEncoding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.StringWriterWithEncoding"/> class.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.StringWriterWithEncoding.#ctor(System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.StringWriterWithEncoding"/> class.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that controls formatting.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.StringWriterWithEncoding.#ctor(System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.StringWriterWithEncoding"/> class.
            </summary>
            <param name="stringBuilder">The string builder to write to.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.StringWriterWithEncoding.#ctor(System.Text.StringBuilder,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.StringWriterWithEncoding"/> class.
            </summary>
            <param name="stringBuilder">The string builder to write to.</param>
            <param name="formatProvider">The format provider.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.StringWriterWithEncoding.#ctor(System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.StringWriterWithEncoding"/> class.
            </summary>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.StringWriterWithEncoding.#ctor(System.IFormatProvider,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.StringWriterWithEncoding"/> class.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.StringWriterWithEncoding.#ctor(System.Text.StringBuilder,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.StringWriterWithEncoding"/> class.
            </summary>
            <param name="stringBuilder">The string builder to write to.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.StringWriterWithEncoding.#ctor(System.Text.StringBuilder,System.IFormatProvider,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Boilerplate.Web.Mvc.StringWriterWithEncoding"/> class.
            </summary>
            <param name="stringBuilder">The string builder to write to.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="P:Boilerplate.Web.Mvc.StringWriterWithEncoding.Encoding">
            <summary>
            Gets the <see cref="T:System.Text.Encoding" /> in which the output is written.
            </summary>
        </member>
        <member name="T:Boilerplate.Web.Mvc.SyndicationFeedExtensions">
            <summary>
            <see cref="T:System.ServiceModel.Syndication.SyndicationFeed"/> extension methods.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.SyndicationFeedExtensions.AddNamespace(System.ServiceModel.Syndication.SyndicationFeed,System.String,System.String)">
            <summary>
            Adds a namespace to the specified feed.
            </summary>
            <param name="feed">The syndication feed.</param>
            <param name="namespacePrefix">The namespace prefix.</param>
            <param name="xmlNamespace">The XML namespace.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.SyndicationFeedExtensions.AddYahooMediaNamespace(System.ServiceModel.Syndication.SyndicationFeed)">
            <summary>
            Adds the yahoo media namespace to the specified feed.
            </summary>
            <param name="feed">The syndication feed.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.SyndicationFeedExtensions.GetIcon(System.ServiceModel.Syndication.SyndicationFeed)">
            <summary>
            Gets the icon URL for the feed.
            </summary>
            <param name="feed">The syndication feed.</param>
            <returns>The icon URL.</returns>
        </member>
        <member name="M:Boilerplate.Web.Mvc.SyndicationFeedExtensions.SetIcon(System.ServiceModel.Syndication.SyndicationFeed,System.String)">
            <summary>
            Sets the icon URL for the feed.
            </summary>
            <param name="feed">The syndication feed.</param>
            <param name="iconUrl">The icon URL.</param>
        </member>
        <member name="M:Boilerplate.Web.Mvc.SyndicationFeedExtensions.SetThumbnail(System.ServiceModel.Syndication.SyndicationItem,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Sets the Yahoo Media thumbnail for the feed entry.
            </summary>
            <param name="item">The feed entry.</param>
            <param name="url">The thumbnail URL.</param>
            <param name="width">The optional width of the thumbnail image.</param>
            <param name="height">The optional height of the thumbnail image.</param>
        </member>
        <member name="T:Boilerplate.Web.Mvc.UrlHelperExtensions">
            <summary>
            <see cref="T:System.Web.Mvc.UrlHelper"/> extension methods.
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.UrlHelperExtensions.AbsoluteAction(System.Web.Mvc.UrlHelper,System.String,System.String,System.Object)">
            <summary>
            Generates a fully qualified URL to an action method by using the specified action name, controller name and 
            route values.
            </summary>
            <param name="url">The URL helper.</param>
            <param name="actionName">The name of the action method.</param>
            <param name="controllerName">The name of the controller.</param>
            <param name="routeValues">The route values.</param>
            <returns>The absolute URL.</returns>
        </member>
        <member name="M:Boilerplate.Web.Mvc.UrlHelperExtensions.AbsoluteContent(System.Web.Mvc.UrlHelper,System.String)">
            <summary>
            Generates a fully qualified URL to the specified content by using the specified content path. Converts a 
            virtual (relative) path to an application absolute path.
            </summary>
            <param name="url">The URL helper.</param>
            <param name="contentPath">The content path.</param>
            <returns>The absolute URL.</returns>
        </member>
        <member name="M:Boilerplate.Web.Mvc.UrlHelperExtensions.AbsoluteRouteUrl(System.Web.Mvc.UrlHelper,System.String,System.Object)">
            <summary>
            Generates a fully qualified URL to the specified route by using the route name and route values.
            </summary>
            <param name="url">The URL helper.</param>
            <param name="routeName">Name of the route.</param>
            <param name="routeValues">The route values.</param>
            <returns>The absolute URL.</returns>
        </member>
        <member name="T:Boilerplate.Web.Mvc.XDocumentExtensions">
            <summary>
            <see cref="T:System.Xml.Linq.XDocument"/> extension methods
            </summary>
        </member>
        <member name="M:Boilerplate.Web.Mvc.XDocumentExtensions.ToString(System.Xml.Linq.XDocument,System.Text.Encoding)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the XML document in the specified encoding.
            </summary>
            <param name="document">The document.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            A <see cref="T:System.String" /> that represents the XML document.
            </returns>
        </member>
    </members>
</doc>
